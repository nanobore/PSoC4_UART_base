ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ADC.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ADC_initVar
  20              		.bss
  21              		.type	ADC_initVar, %object
  22              		.size	ADC_initVar, 1
  23              	ADC_initVar:
  24 0000 00       		.space	1
  25              		.comm	ADC_offset,2,4
  26              		.comm	ADC_countsPer10Volt,4,4
  27              		.section	.rodata
  28              		.align	2
  29              		.type	ADC_channelsConfig, %object
  30              		.size	ADC_channelsConfig, 4
  31              	ADC_channelsConfig:
  32 0000 00010000 		.word	256
  33              		.section	.text.ADC_Start,"ax",%progbits
  34              		.align	2
  35              		.global	ADC_Start
  36              		.code	16
  37              		.thumb_func
  38              		.type	ADC_Start, %function
  39              	ADC_Start:
  40              	.LFB1:
  41              		.file 1 "Generated_Source\\PSoC4\\ADC.c"
   1:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:Generated_Source\PSoC4/ADC.c **** * Version 2.50
   4:Generated_Source\PSoC4/ADC.c **** *
   5:Generated_Source\PSoC4/ADC.c **** * Description:
   6:Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC.c **** *
   9:Generated_Source\PSoC4/ADC.c **** * Note:
  10:Generated_Source\PSoC4/ADC.c **** *
  11:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 2


  17:Generated_Source\PSoC4/ADC.c **** 
  18:Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:Generated_Source\PSoC4/ADC.c **** 
  20:Generated_Source\PSoC4/ADC.c **** 
  21:Generated_Source\PSoC4/ADC.c **** /***************************************
  22:Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/ADC.c **** 
  28:Generated_Source\PSoC4/ADC.c **** 
  29:Generated_Source\PSoC4/ADC.c **** /***************************************
  30:Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000100u };
  34:Generated_Source\PSoC4/ADC.c **** 
  35:Generated_Source\PSoC4/ADC.c **** 
  36:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC.c **** *
  40:Generated_Source\PSoC4/ADC.c **** * Summary:
  41:Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC.c **** *
  45:Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC.c **** *  None.
  47:Generated_Source\PSoC4/ADC.c **** *
  48:Generated_Source\PSoC4/ADC.c **** * Return:
  49:Generated_Source\PSoC4/ADC.c **** *  None.
  50:Generated_Source\PSoC4/ADC.c **** *
  51:Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:Generated_Source\PSoC4/ADC.c **** *
  62:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:Generated_Source\PSoC4/ADC.c **** {
  42              		.loc 1 64 0
  43              		.cfi_startproc
  44              		@ args = 0, pretend = 0, frame = 0
  45              		@ frame_needed = 1, uses_anonymous_args = 0
  46 0000 80B5     		push	{r7, lr}
  47              		.cfi_def_cfa_offset 8
  48              		.cfi_offset 7, -8
  49              		.cfi_offset 14, -4
  50 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 3


  51              		.cfi_def_cfa_register 7
  65:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  52              		.loc 1 66 0
  53 0004 064B     		ldr	r3, .L3
  54 0006 1B78     		ldrb	r3, [r3]
  55 0008 002B     		cmp	r3, #0
  56 000a 04D1     		bne	.L2
  67:Generated_Source\PSoC4/ADC.c ****     {
  68:Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  57              		.loc 1 68 0
  58 000c FFF7FEFF 		bl	ADC_Init
  69:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  59              		.loc 1 69 0
  60 0010 034B     		ldr	r3, .L3
  61 0012 0122     		movs	r2, #1
  62 0014 1A70     		strb	r2, [r3]
  63              	.L2:
  70:Generated_Source\PSoC4/ADC.c ****     }
  71:Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  64              		.loc 1 71 0
  65 0016 FFF7FEFF 		bl	ADC_Enable
  72:Generated_Source\PSoC4/ADC.c **** }
  66              		.loc 1 72 0
  67 001a C046     		nop
  68 001c BD46     		mov	sp, r7
  69              		@ sp needed
  70 001e 80BD     		pop	{r7, pc}
  71              	.L4:
  72              		.align	2
  73              	.L3:
  74 0020 00000000 		.word	ADC_initVar
  75              		.cfi_endproc
  76              	.LFE1:
  77              		.size	ADC_Start, .-ADC_Start
  78              		.section	.text.ADC_Init,"ax",%progbits
  79              		.align	2
  80              		.global	ADC_Init
  81              		.code	16
  82              		.thumb_func
  83              		.type	ADC_Init, %function
  84              	ADC_Init:
  85              	.LFB2:
  73:Generated_Source\PSoC4/ADC.c **** 
  74:Generated_Source\PSoC4/ADC.c **** 
  75:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC.c **** *
  79:Generated_Source\PSoC4/ADC.c **** * Summary:
  80:Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:Generated_Source\PSoC4/ADC.c **** *
  84:Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:Generated_Source\PSoC4/ADC.c **** *  None.
  86:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 4


  87:Generated_Source\PSoC4/ADC.c **** * Return:
  88:Generated_Source\PSoC4/ADC.c **** *  None.
  89:Generated_Source\PSoC4/ADC.c **** *
  90:Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC.c **** *
  93:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:Generated_Source\PSoC4/ADC.c **** {
  86              		.loc 1 95 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 16
  89              		@ frame_needed = 1, uses_anonymous_args = 0
  90 0000 80B5     		push	{r7, lr}
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 7, -8
  93              		.cfi_offset 14, -4
  94 0002 84B0     		sub	sp, sp, #16
  95              		.cfi_def_cfa_offset 24
  96 0004 00AF     		add	r7, sp, #0
  97              		.cfi_def_cfa_register 7
  96:Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC.c **** 
 100:Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC.c ****         {
 103:Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 5


 132:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/ADC.c ****         };
 168:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/ADC.c **** 
 170:Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  98              		.loc 1 172 0
  99 0006 0321     		movs	r1, #3
 100 0008 1020     		movs	r0, #16
 101 000a FFF7FEFF 		bl	CyIntSetPriority
 173:Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
 102              		.loc 1 173 0
 103 000e 554B     		ldr	r3, .L17
 104 0010 1900     		movs	r1, r3
 105 0012 1020     		movs	r0, #16
 106 0014 FFF7FEFF 		bl	CyIntSetVector
 174:Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:Generated_Source\PSoC4/ADC.c **** 
 176:Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 107              		.loc 1 177 0
 108 0018 534B     		ldr	r3, .L17+4
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 6


 109 001a 0122     		movs	r2, #1
 110 001c 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 111              		.loc 1 180 0
 112 001e 534B     		ldr	r3, .L17+8
 113 0020 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 114              		.loc 1 178 0
 115 0022 002B     		cmp	r3, #0
 116 0024 01DA     		bge	.L6
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 117              		.loc 1 178 0 is_stmt 0 discriminator 1
 118 0026 5249     		ldr	r1, .L17+12
 119 0028 00E0     		b	.L7
 120              	.L6:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 121              		.loc 1 178 0 discriminator 2
 122 002a 5249     		ldr	r1, .L17+16
 123              	.L7:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 124              		.loc 1 178 0 discriminator 4
 125 002c 524B     		ldr	r3, .L17+20
 126 002e 524A     		ldr	r2, .L17+20
 127 0030 1268     		ldr	r2, [r2]
 128 0032 0A43     		orrs	r2, r1
 129 0034 1A60     		str	r2, [r3]
 181:Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 130              		.loc 1 182 0 is_stmt 1 discriminator 4
 131 0036 514B     		ldr	r3, .L17+24
 132 0038 514A     		ldr	r2, .L17+28
 133 003a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 134              		.loc 1 183 0 discriminator 4
 135 003c 514B     		ldr	r3, .L17+32
 136 003e 524A     		ldr	r2, .L17+36
 137 0040 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 138              		.loc 1 184 0 discriminator 4
 139 0042 524B     		ldr	r3, .L17+40
 140 0044 0022     		movs	r2, #0
 141 0046 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 142              		.loc 1 185 0 discriminator 4
 143 0048 514B     		ldr	r3, .L17+44
 144 004a 524A     		ldr	r2, .L17+48
 145 004c 1A60     		str	r2, [r3]
 186:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 146              		.loc 1 186 0 discriminator 4
 147 004e 524B     		ldr	r3, .L17+52
 148 0050 504A     		ldr	r2, .L17+48
 149 0052 1A60     		str	r2, [r3]
 187:Generated_Source\PSoC4/ADC.c ****     
 188:Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 7


 190:Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 191:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 194:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/ADC.c **** 
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 150              		.loc 1 197 0 discriminator 4
 151 0054 514B     		ldr	r3, .L17+56
 152 0056 0022     		movs	r2, #0
 153 0058 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 154              		.loc 1 198 0 discriminator 4
 155 005a 514B     		ldr	r3, .L17+60
 156 005c 0022     		movs	r2, #0
 157 005e 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 158              		.loc 1 199 0 discriminator 4
 159 0060 504B     		ldr	r3, .L17+64
 160 0062 0122     		movs	r2, #1
 161 0064 1A60     		str	r2, [r3]
 200:Generated_Source\PSoC4/ADC.c **** 
 201:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/ADC.c **** 
 205:Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 162              		.loc 1 206 0 discriminator 4
 163 0066 504B     		ldr	r3, .L17+68
 164 0068 1B68     		ldr	r3, [r3]
 165 006a 7B60     		str	r3, [r7, #4]
 207:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 166              		.loc 1 207 0 discriminator 4
 167 006c 7B68     		ldr	r3, [r7, #4]
 168 006e 4F4A     		ldr	r2, .L17+72
 169 0070 1340     		ands	r3, r2
 170 0072 7B60     		str	r3, [r7, #4]
 208:Generated_Source\PSoC4/ADC.c ****     
 209:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/ADC.c ****     #else
 216:Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:Generated_Source\PSoC4/ADC.c ****         #else
 220:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 171              		.loc 1 220 0 discriminator 4
 172 0074 7B68     		ldr	r3, [r7, #4]
 173 0076 8022     		movs	r2, #128
 174 0078 9205     		lsls	r2, r2, #22
 175 007a 1343     		orrs	r3, r2
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 8


 176 007c 7B60     		str	r3, [r7, #4]
 221:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 177              		.loc 1 221 0 discriminator 4
 178 007e 7B68     		ldr	r3, [r7, #4]
 179 0080 0122     		movs	r2, #1
 180 0082 9343     		bics	r3, r2
 181 0084 7B60     		str	r3, [r7, #4]
 222:Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/ADC.c ****     
 226:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 182              		.loc 1 226 0 discriminator 4
 183 0086 484B     		ldr	r3, .L17+68
 184 0088 7A68     		ldr	r2, [r7, #4]
 185 008a 1A60     		str	r2, [r3]
 227:Generated_Source\PSoC4/ADC.c **** 
 228:Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:Generated_Source\PSoC4/ADC.c **** 
 232:Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 186              		.loc 1 232 0 discriminator 4
 187 008c 0023     		movs	r3, #0
 188 008e FB60     		str	r3, [r7, #12]
 189 0090 60E0     		b	.L8
 190              	.L16:
 233:Generated_Source\PSoC4/ADC.c ****     {
 234:Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 191              		.loc 1 234 0
 192 0092 8023     		movs	r3, #128
 193 0094 5A00     		lsls	r2, r3, #1
 194 0096 DC23     		movs	r3, #220
 195 0098 9B01     		lsls	r3, r3, #6
 196 009a 1340     		ands	r3, r2
 197 009c 7B60     		str	r3, [r7, #4]
 235:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 237:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/ADC.c ****         
 239:Generated_Source\PSoC4/ADC.c ****         
 240:Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/ADC.c ****         */
 244:Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:Generated_Source\PSoC4/ADC.c **** 
 249:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/ADC.c ****         {
 253:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 198              		.loc 1 253 0
 199 009e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 9


 200 00a0 9B00     		lsls	r3, r3, #2
 201 00a2 434A     		ldr	r2, .L17+76
 202 00a4 9446     		mov	ip, r2
 203 00a6 6344     		add	r3, r3, ip
 204 00a8 7A68     		ldr	r2, [r7, #4]
 205 00aa 1A60     		str	r2, [r3]
 254:Generated_Source\PSoC4/ADC.c **** 
 255:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 206              		.loc 1 255 0
 207 00ac 8023     		movs	r3, #128
 208 00ae 5B00     		lsls	r3, r3, #1
 209 00b0 0122     		movs	r2, #1
 210 00b2 1340     		ands	r3, r2
 211 00b4 0AD0     		beq	.L9
 256:Generated_Source\PSoC4/ADC.c ****             {
 257:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 212              		.loc 1 257 0
 213 00b6 394B     		ldr	r3, .L17+56
 214 00b8 384A     		ldr	r2, .L17+56
 215 00ba 1168     		ldr	r1, [r2]
 216 00bc 0120     		movs	r0, #1
 217 00be FA68     		ldr	r2, [r7, #12]
 218 00c0 9040     		lsls	r0, r0, r2
 219 00c2 0200     		movs	r2, r0
 220 00c4 1204     		lsls	r2, r2, #16
 221 00c6 120C     		lsrs	r2, r2, #16
 222 00c8 0A43     		orrs	r2, r1
 223 00ca 1A60     		str	r2, [r3]
 224              	.L9:
 258:Generated_Source\PSoC4/ADC.c ****             }
 259:Generated_Source\PSoC4/ADC.c **** 
 260:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 225              		.loc 1 260 0
 226 00cc 8023     		movs	r3, #128
 227 00ce 5B00     		lsls	r3, r3, #1
 228 00d0 0222     		movs	r2, #2
 229 00d2 1340     		ands	r3, r2
 230 00d4 0AD0     		beq	.L10
 261:Generated_Source\PSoC4/ADC.c ****             {
 262:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 231              		.loc 1 262 0
 232 00d6 324B     		ldr	r3, .L17+60
 233 00d8 314A     		ldr	r2, .L17+60
 234 00da 1168     		ldr	r1, [r2]
 235 00dc 0120     		movs	r0, #1
 236 00de FA68     		ldr	r2, [r7, #12]
 237 00e0 9040     		lsls	r0, r0, r2
 238 00e2 0200     		movs	r2, r0
 239 00e4 1204     		lsls	r2, r2, #16
 240 00e6 120C     		lsrs	r2, r2, #16
 241 00e8 0A43     		orrs	r2, r1
 242 00ea 1A60     		str	r2, [r3]
 243              	.L10:
 263:Generated_Source\PSoC4/ADC.c ****             }
 264:Generated_Source\PSoC4/ADC.c ****         }
 265:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/ADC.c ****             else
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 10


 267:Generated_Source\PSoC4/ADC.c ****             {
 268:Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:Generated_Source\PSoC4/ADC.c **** 
 270:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/ADC.c ****                 {
 272:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/ADC.c ****                 }
 274:Generated_Source\PSoC4/ADC.c **** 
 275:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:Generated_Source\PSoC4/ADC.c ****                 {
 277:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/ADC.c ****                 }
 279:Generated_Source\PSoC4/ADC.c ****             }
 280:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/ADC.c **** 
 282:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 244              		.loc 1 282 0
 245 00ec 8023     		movs	r3, #128
 246 00ee 5A00     		lsls	r2, r3, #1
 247 00f0 8023     		movs	r3, #128
 248 00f2 9B00     		lsls	r3, r3, #2
 249 00f4 1340     		ands	r3, r2
 250 00f6 03D0     		beq	.L11
 283:Generated_Source\PSoC4/ADC.c ****         {
 284:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 251              		.loc 1 284 0
 252 00f8 8023     		movs	r3, #128
 253 00fa 5B00     		lsls	r3, r3, #1
 254 00fc BB60     		str	r3, [r7, #8]
 255 00fe 02E0     		b	.L12
 256              	.L11:
 285:Generated_Source\PSoC4/ADC.c ****         }
 286:Generated_Source\PSoC4/ADC.c ****         else
 287:Generated_Source\PSoC4/ADC.c ****         {
 288:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 257              		.loc 1 288 0
 258 0100 8023     		movs	r3, #128
 259 0102 5B01     		lsls	r3, r3, #5
 260 0104 BB60     		str	r3, [r7, #8]
 261              	.L12:
 289:Generated_Source\PSoC4/ADC.c ****         }
 290:Generated_Source\PSoC4/ADC.c **** 
 291:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 262              		.loc 1 291 0
 263 0106 8023     		movs	r3, #128
 264 0108 5A00     		lsls	r2, r3, #1
 265 010a 8023     		movs	r3, #128
 266 010c 5B00     		lsls	r3, r3, #1
 267 010e 1340     		ands	r3, r2
 268 0110 05D1     		bne	.L13
 292:Generated_Source\PSoC4/ADC.c ****         {
 293:Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/ADC.c ****             #else
 298:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 11


 269              		.loc 1 298 0
 270 0112 284B     		ldr	r3, .L17+80
 271 0114 FA68     		ldr	r2, [r7, #12]
 272 0116 5200     		lsls	r2, r2, #1
 273 0118 0021     		movs	r1, #0
 274 011a D152     		strh	r1, [r2, r3]
 275 011c 04E0     		b	.L14
 276              	.L13:
 299:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:Generated_Source\PSoC4/ADC.c ****         }
 301:Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/ADC.c ****         {
 303:Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 306:Generated_Source\PSoC4/ADC.c ****             #else
 307:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 277              		.loc 1 307 0
 278 011e 254B     		ldr	r3, .L17+80
 279 0120 FA68     		ldr	r2, [r7, #12]
 280 0122 5200     		lsls	r2, r2, #1
 281 0124 0021     		movs	r1, #0
 282 0126 D152     		strh	r1, [r2, r3]
 283              	.L14:
 308:Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:Generated_Source\PSoC4/ADC.c ****         }
 310:Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 284              		.loc 1 311 0 discriminator 2
 285 0128 BB68     		ldr	r3, [r7, #8]
 286 012a 234A     		ldr	r2, .L17+84
 287 012c 5343     		muls	r3, r2
 288 012e 8022     		movs	r2, #128
 289 0130 D200     		lsls	r2, r2, #3
 290 0132 9446     		mov	ip, r2
 291 0134 6344     		add	r3, r3, ip
 312:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 292              		.loc 1 312 0 discriminator 2
 293 0136 002B     		cmp	r3, #0
 294 0138 02DA     		bge	.L15
 295 013a 204A     		ldr	r2, .L17+88
 296 013c 9446     		mov	ip, r2
 297 013e 6344     		add	r3, r3, ip
 298              	.L15:
 299 0140 DB12     		asrs	r3, r3, #11
 311:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 300              		.loc 1 311 0 discriminator 2
 301 0142 1BB2     		sxth	r3, r3
 302 0144 1900     		movs	r1, r3
 303 0146 1E4B     		ldr	r3, .L17+92
 304 0148 FA68     		ldr	r2, [r7, #12]
 305 014a 9200     		lsls	r2, r2, #2
 306 014c D150     		str	r1, [r2, r3]
 232:Generated_Source\PSoC4/ADC.c ****     {
 307              		.loc 1 232 0 discriminator 2
 308 014e FB68     		ldr	r3, [r7, #12]
 309 0150 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 12


 310 0152 FB60     		str	r3, [r7, #12]
 311              	.L8:
 232:Generated_Source\PSoC4/ADC.c ****     {
 312              		.loc 1 232 0 is_stmt 0 discriminator 1
 313 0154 FB68     		ldr	r3, [r7, #12]
 314 0156 002B     		cmp	r3, #0
 315 0158 9BD0     		beq	.L16
 313:Generated_Source\PSoC4/ADC.c ****     }
 314:Generated_Source\PSoC4/ADC.c **** }
 316              		.loc 1 314 0 is_stmt 1
 317 015a C046     		nop
 318 015c BD46     		mov	sp, r7
 319 015e 04B0     		add	sp, sp, #16
 320              		@ sp needed
 321 0160 80BD     		pop	{r7, pc}
 322              	.L18:
 323 0162 C046     		.align	2
 324              	.L17:
 325 0164 00000000 		.word	ADC_ISR
 326 0168 20003A40 		.word	1077542944
 327 016c 80033A40 		.word	1077543808
 328 0170 C0021051 		.word	1360003776
 329 0174 C0020051 		.word	1358955200
 330 0178 00003A40 		.word	1077542912
 331 017c 04003A40 		.word	1077542916
 332 0180 8C000080 		.word	-2147483508
 333 0184 18003A40 		.word	1077542936
 334 0188 0000FF07 		.word	134152192
 335 018c 1C003A40 		.word	1077542940
 336 0190 10003A40 		.word	1077542928
 337 0194 02000200 		.word	131074
 338 0198 14003A40 		.word	1077542932
 339 019c 28023A40 		.word	1077543464
 340 01a0 38023A40 		.word	1077543480
 341 01a4 18023A40 		.word	1077543448
 342 01a8 30003A40 		.word	1077542960
 343 01ac FFFFFFDF 		.word	-536870913
 344 01b0 80003A40 		.word	1077543040
 345 01b4 00000000 		.word	ADC_offset
 346 01b8 10270000 		.word	10000
 347 01bc FF070000 		.word	2047
 348 01c0 00000000 		.word	ADC_countsPer10Volt
 349              		.cfi_endproc
 350              	.LFE2:
 351              		.size	ADC_Init, .-ADC_Init
 352              		.section	.text.ADC_Enable,"ax",%progbits
 353              		.align	2
 354              		.global	ADC_Enable
 355              		.code	16
 356              		.thumb_func
 357              		.type	ADC_Enable, %function
 358              	ADC_Enable:
 359              	.LFB3:
 315:Generated_Source\PSoC4/ADC.c **** 
 316:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 13


 319:Generated_Source\PSoC4/ADC.c **** *
 320:Generated_Source\PSoC4/ADC.c **** * Summary:
 321:Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/ADC.c **** *
 323:Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:Generated_Source\PSoC4/ADC.c **** *  None.
 325:Generated_Source\PSoC4/ADC.c **** *
 326:Generated_Source\PSoC4/ADC.c **** * Return:
 327:Generated_Source\PSoC4/ADC.c **** *  None.
 328:Generated_Source\PSoC4/ADC.c **** *
 329:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:Generated_Source\PSoC4/ADC.c **** {
 360              		.loc 1 331 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364 0000 80B5     		push	{r7, lr}
 365              		.cfi_def_cfa_offset 8
 366              		.cfi_offset 7, -8
 367              		.cfi_offset 14, -4
 368 0002 00AF     		add	r7, sp, #0
 369              		.cfi_def_cfa_register 7
 332:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 370              		.loc 1 332 0
 371 0004 0A4B     		ldr	r3, .L23
 372 0006 1B68     		ldr	r3, [r3]
 373 0008 002B     		cmp	r3, #0
 374 000a 0EDB     		blt	.L22
 333:Generated_Source\PSoC4/ADC.c ****     {
 334:Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/ADC.c **** 
 336:Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 375              		.loc 1 336 0
 376 000c C046     		nop
 377              	.L21:
 378              		.loc 1 336 0 is_stmt 0 discriminator 1
 379 000e 094B     		ldr	r3, .L23+4
 380 0010 1B68     		ldr	r3, [r3]
 381 0012 002B     		cmp	r3, #0
 382 0014 FBDB     		blt	.L21
 337:Generated_Source\PSoC4/ADC.c ****             {
 338:Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/ADC.c ****             }
 340:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/ADC.c ****         
 342:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 383              		.loc 1 342 0 is_stmt 1
 384 0016 064B     		ldr	r3, .L23
 385 0018 054A     		ldr	r2, .L23
 386 001a 1268     		ldr	r2, [r2]
 387 001c 8021     		movs	r1, #128
 388 001e 0906     		lsls	r1, r1, #24
 389 0020 0A43     		orrs	r2, r1
 390 0022 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/ADC.c ****         
 344:Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 14


 345:Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 391              		.loc 1 345 0
 392 0024 0A20     		movs	r0, #10
 393 0026 FFF7FEFF 		bl	CyDelayUs
 394              	.L22:
 346:Generated_Source\PSoC4/ADC.c ****     }
 347:Generated_Source\PSoC4/ADC.c **** }
 395              		.loc 1 347 0
 396 002a C046     		nop
 397 002c BD46     		mov	sp, r7
 398              		@ sp needed
 399 002e 80BD     		pop	{r7, pc}
 400              	.L24:
 401              		.align	2
 402              	.L23:
 403 0030 00003A40 		.word	1077542912
 404 0034 08023A40 		.word	1077543432
 405              		.cfi_endproc
 406              	.LFE3:
 407              		.size	ADC_Enable, .-ADC_Enable
 408              		.section	.text.ADC_Stop,"ax",%progbits
 409              		.align	2
 410              		.global	ADC_Stop
 411              		.code	16
 412              		.thumb_func
 413              		.type	ADC_Stop, %function
 414              	ADC_Stop:
 415              	.LFB4:
 348:Generated_Source\PSoC4/ADC.c **** 
 349:Generated_Source\PSoC4/ADC.c **** 
 350:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:Generated_Source\PSoC4/ADC.c **** *
 354:Generated_Source\PSoC4/ADC.c **** * Summary:
 355:Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/ADC.c **** *  mode.
 357:Generated_Source\PSoC4/ADC.c **** *
 358:Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:Generated_Source\PSoC4/ADC.c **** *  None.
 360:Generated_Source\PSoC4/ADC.c **** *
 361:Generated_Source\PSoC4/ADC.c **** * Return:
 362:Generated_Source\PSoC4/ADC.c **** *  None.
 363:Generated_Source\PSoC4/ADC.c **** *
 364:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:Generated_Source\PSoC4/ADC.c **** {
 416              		.loc 1 366 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 1, uses_anonymous_args = 0
 420 0000 80B5     		push	{r7, lr}
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 7, -8
 423              		.cfi_offset 14, -4
 424 0002 00AF     		add	r7, sp, #0
 425              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 15


 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 426              		.loc 1 367 0
 427 0004 044B     		ldr	r3, .L26
 428 0006 044A     		ldr	r2, .L26
 429 0008 1268     		ldr	r2, [r2]
 430 000a 5200     		lsls	r2, r2, #1
 431 000c 5208     		lsrs	r2, r2, #1
 432 000e 1A60     		str	r2, [r3]
 368:Generated_Source\PSoC4/ADC.c **** }
 433              		.loc 1 368 0
 434 0010 C046     		nop
 435 0012 BD46     		mov	sp, r7
 436              		@ sp needed
 437 0014 80BD     		pop	{r7, pc}
 438              	.L27:
 439 0016 C046     		.align	2
 440              	.L26:
 441 0018 00003A40 		.word	1077542912
 442              		.cfi_endproc
 443              	.LFE4:
 444              		.size	ADC_Stop, .-ADC_Stop
 445              		.section	.text.ADC_StartConvert,"ax",%progbits
 446              		.align	2
 447              		.global	ADC_StartConvert
 448              		.code	16
 449              		.thumb_func
 450              		.type	ADC_StartConvert, %function
 451              	ADC_StartConvert:
 452              	.LFB5:
 369:Generated_Source\PSoC4/ADC.c **** 
 370:Generated_Source\PSoC4/ADC.c **** 
 371:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:Generated_Source\PSoC4/ADC.c **** *
 375:Generated_Source\PSoC4/ADC.c **** * Summary:
 376:Generated_Source\PSoC4/ADC.c **** *  Description:
 377:Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:Generated_Source\PSoC4/ADC.c **** *
 380:Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/ADC.c **** *
 384:Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:Generated_Source\PSoC4/ADC.c **** *  None.
 386:Generated_Source\PSoC4/ADC.c **** *
 387:Generated_Source\PSoC4/ADC.c **** * Return:
 388:Generated_Source\PSoC4/ADC.c **** *  None.
 389:Generated_Source\PSoC4/ADC.c **** *
 390:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:Generated_Source\PSoC4/ADC.c **** {
 453              		.loc 1 392 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 16


 457 0000 80B5     		push	{r7, lr}
 458              		.cfi_def_cfa_offset 8
 459              		.cfi_offset 7, -8
 460              		.cfi_offset 14, -4
 461 0002 00AF     		add	r7, sp, #0
 462              		.cfi_def_cfa_register 7
 393:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 463              		.loc 1 394 0
 464 0004 044B     		ldr	r3, .L29
 465 0006 044A     		ldr	r2, .L29
 466 0008 1268     		ldr	r2, [r2]
 467 000a 8021     		movs	r1, #128
 468 000c 4902     		lsls	r1, r1, #9
 469 000e 0A43     		orrs	r2, r1
 470 0010 1A60     		str	r2, [r3]
 395:Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 397:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:Generated_Source\PSoC4/ADC.c **** 
 399:Generated_Source\PSoC4/ADC.c **** }
 471              		.loc 1 399 0
 472 0012 C046     		nop
 473 0014 BD46     		mov	sp, r7
 474              		@ sp needed
 475 0016 80BD     		pop	{r7, pc}
 476              	.L30:
 477              		.align	2
 478              	.L29:
 479 0018 04003A40 		.word	1077542916
 480              		.cfi_endproc
 481              	.LFE5:
 482              		.size	ADC_StartConvert, .-ADC_StartConvert
 483              		.section	.text.ADC_StopConvert,"ax",%progbits
 484              		.align	2
 485              		.global	ADC_StopConvert
 486              		.code	16
 487              		.thumb_func
 488              		.type	ADC_StopConvert, %function
 489              	ADC_StopConvert:
 490              	.LFB6:
 400:Generated_Source\PSoC4/ADC.c **** 
 401:Generated_Source\PSoC4/ADC.c **** 
 402:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:Generated_Source\PSoC4/ADC.c **** *
 406:Generated_Source\PSoC4/ADC.c **** * Summary:
 407:Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/ADC.c **** *
 409:Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:Generated_Source\PSoC4/ADC.c **** *  None.
 411:Generated_Source\PSoC4/ADC.c **** *
 412:Generated_Source\PSoC4/ADC.c **** * Return:
 413:Generated_Source\PSoC4/ADC.c **** *  None.
 414:Generated_Source\PSoC4/ADC.c **** *
 415:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 17


 416:Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:Generated_Source\PSoC4/ADC.c **** {
 491              		.loc 1 417 0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 0
 494              		@ frame_needed = 1, uses_anonymous_args = 0
 495 0000 80B5     		push	{r7, lr}
 496              		.cfi_def_cfa_offset 8
 497              		.cfi_offset 7, -8
 498              		.cfi_offset 14, -4
 499 0002 00AF     		add	r7, sp, #0
 500              		.cfi_def_cfa_register 7
 418:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 501              		.loc 1 419 0
 502 0004 044B     		ldr	r3, .L32
 503 0006 044A     		ldr	r2, .L32
 504 0008 1268     		ldr	r2, [r2]
 505 000a 0449     		ldr	r1, .L32+4
 506 000c 0A40     		ands	r2, r1
 507 000e 1A60     		str	r2, [r3]
 420:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:Generated_Source\PSoC4/ADC.c **** }
 508              		.loc 1 421 0
 509 0010 C046     		nop
 510 0012 BD46     		mov	sp, r7
 511              		@ sp needed
 512 0014 80BD     		pop	{r7, pc}
 513              	.L33:
 514 0016 C046     		.align	2
 515              	.L32:
 516 0018 04003A40 		.word	1077542916
 517 001c FFFFFEFF 		.word	-65537
 518              		.cfi_endproc
 519              	.LFE6:
 520              		.size	ADC_StopConvert, .-ADC_StopConvert
 521              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 522              		.align	2
 523              		.global	ADC_IsEndConversion
 524              		.code	16
 525              		.thumb_func
 526              		.type	ADC_IsEndConversion, %function
 527              	ADC_IsEndConversion:
 528              	.LFB7:
 422:Generated_Source\PSoC4/ADC.c **** 
 423:Generated_Source\PSoC4/ADC.c **** 
 424:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:Generated_Source\PSoC4/ADC.c **** *
 428:Generated_Source\PSoC4/ADC.c **** * Summary:
 429:Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 18


 435:Generated_Source\PSoC4/ADC.c **** *  completed.
 436:Generated_Source\PSoC4/ADC.c **** *
 437:Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:Generated_Source\PSoC4/ADC.c **** *
 445:Generated_Source\PSoC4/ADC.c **** * Return:
 446:Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/ADC.c **** *
 449:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/ADC.c **** {
 529              		.loc 1 451 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 16
 532              		@ frame_needed = 1, uses_anonymous_args = 0
 533 0000 80B5     		push	{r7, lr}
 534              		.cfi_def_cfa_offset 8
 535              		.cfi_offset 7, -8
 536              		.cfi_offset 14, -4
 537 0002 84B0     		sub	sp, sp, #16
 538              		.cfi_def_cfa_offset 24
 539 0004 00AF     		add	r7, sp, #0
 540              		.cfi_def_cfa_register 7
 541 0006 7860     		str	r0, [r7, #4]
 452:Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 542              		.loc 1 452 0
 543 0008 0023     		movs	r3, #0
 544 000a FB60     		str	r3, [r7, #12]
 453:Generated_Source\PSoC4/ADC.c **** 
 454:Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 545              		.loc 1 454 0
 546 000c 7B68     		ldr	r3, [r7, #4]
 547 000e 0322     		movs	r2, #3
 548 0010 1340     		ands	r3, r2
 549 0012 11D0     		beq	.L35
 550              	.L37:
 455:Generated_Source\PSoC4/ADC.c ****     {
 456:Generated_Source\PSoC4/ADC.c ****         do
 457:Generated_Source\PSoC4/ADC.c ****         {
 458:Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 551              		.loc 1 458 0 discriminator 2
 552 0014 0B4B     		ldr	r3, .L39
 553 0016 1B68     		ldr	r3, [r3]
 554 0018 0122     		movs	r2, #1
 555 001a 1340     		ands	r3, r2
 556 001c FB60     		str	r3, [r7, #12]
 459:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 557              		.loc 1 459 0 discriminator 2
 558 001e FB68     		ldr	r3, [r7, #12]
 559 0020 002B     		cmp	r3, #0
 560 0022 03D1     		bne	.L36
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 19


 561              		.loc 1 459 0 is_stmt 0 discriminator 1
 562 0024 7B68     		ldr	r3, [r7, #4]
 563 0026 0222     		movs	r2, #2
 564 0028 1340     		ands	r3, r2
 565 002a F3D1     		bne	.L37
 566              	.L36:
 460:Generated_Source\PSoC4/ADC.c **** 
 461:Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 567              		.loc 1 461 0 is_stmt 1
 568 002c FB68     		ldr	r3, [r7, #12]
 569 002e 002B     		cmp	r3, #0
 570 0030 02D0     		beq	.L35
 462:Generated_Source\PSoC4/ADC.c ****         {
 463:Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 571              		.loc 1 464 0
 572 0032 044B     		ldr	r3, .L39
 573 0034 0122     		movs	r2, #1
 574 0036 1A60     		str	r2, [r3]
 575              	.L35:
 465:Generated_Source\PSoC4/ADC.c ****         }
 466:Generated_Source\PSoC4/ADC.c ****     }
 467:Generated_Source\PSoC4/ADC.c **** 
 468:Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/ADC.c ****         {
 471:Generated_Source\PSoC4/ADC.c ****             do
 472:Generated_Source\PSoC4/ADC.c ****             {
 473:Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/ADC.c **** 
 477:Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/ADC.c ****             {
 479:Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/ADC.c ****             }
 482:Generated_Source\PSoC4/ADC.c ****         }
 483:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/ADC.c **** 
 485:Generated_Source\PSoC4/ADC.c ****     return (status);
 576              		.loc 1 485 0
 577 0038 FB68     		ldr	r3, [r7, #12]
 486:Generated_Source\PSoC4/ADC.c **** }
 578              		.loc 1 486 0
 579 003a 1800     		movs	r0, r3
 580 003c BD46     		mov	sp, r7
 581 003e 04B0     		add	sp, sp, #16
 582              		@ sp needed
 583 0040 80BD     		pop	{r7, pc}
 584              	.L40:
 585 0042 C046     		.align	2
 586              	.L39:
 587 0044 10023A40 		.word	1077543440
 588              		.cfi_endproc
 589              	.LFE7:
 590              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 20


 591              		.section	.text.ADC_GetResult16,"ax",%progbits
 592              		.align	2
 593              		.global	ADC_GetResult16
 594              		.code	16
 595              		.thumb_func
 596              		.type	ADC_GetResult16, %function
 597              	ADC_GetResult16:
 598              	.LFB8:
 487:Generated_Source\PSoC4/ADC.c **** 
 488:Generated_Source\PSoC4/ADC.c **** 
 489:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:Generated_Source\PSoC4/ADC.c **** *
 493:Generated_Source\PSoC4/ADC.c **** * Summary:
 494:Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/ADC.c **** *
 496:Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/ADC.c **** *
 500:Generated_Source\PSoC4/ADC.c **** * Return:
 501:Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/ADC.c **** *
 503:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/ADC.c **** {
 599              		.loc 1 505 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 16
 602              		@ frame_needed = 1, uses_anonymous_args = 0
 603 0000 80B5     		push	{r7, lr}
 604              		.cfi_def_cfa_offset 8
 605              		.cfi_offset 7, -8
 606              		.cfi_offset 14, -4
 607 0002 84B0     		sub	sp, sp, #16
 608              		.cfi_def_cfa_offset 24
 609 0004 00AF     		add	r7, sp, #0
 610              		.cfi_def_cfa_register 7
 611 0006 7860     		str	r0, [r7, #4]
 506:Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:Generated_Source\PSoC4/ADC.c **** 
 508:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 612              		.loc 1 509 0
 613 0008 7B68     		ldr	r3, [r7, #4]
 614 000a 002B     		cmp	r3, #0
 615 000c 02D0     		beq	.L42
 616              		.loc 1 509 0 is_stmt 0 discriminator 1
 617 000e 0020     		movs	r0, #0
 618 0010 FFF7FEFF 		bl	CyHalt
 619              	.L42:
 510:Generated_Source\PSoC4/ADC.c **** 
 511:Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 620              		.loc 1 511 0 is_stmt 1
 621 0014 7B68     		ldr	r3, [r7, #4]
 622 0016 002B     		cmp	r3, #0
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 21


 623 0018 09D1     		bne	.L43
 512:Generated_Source\PSoC4/ADC.c ****     {
 513:Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 624              		.loc 1 513 0
 625 001a 7B68     		ldr	r3, [r7, #4]
 626 001c 9B00     		lsls	r3, r3, #2
 627 001e 084A     		ldr	r2, .L46
 628 0020 9446     		mov	ip, r2
 629 0022 6344     		add	r3, r3, ip
 630 0024 1B68     		ldr	r3, [r3]
 631 0026 1B04     		lsls	r3, r3, #16
 632 0028 1B0C     		lsrs	r3, r3, #16
 633 002a FB60     		str	r3, [r7, #12]
 634 002c 01E0     		b	.L44
 635              	.L43:
 514:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:Generated_Source\PSoC4/ADC.c ****     }
 516:Generated_Source\PSoC4/ADC.c ****     else
 517:Generated_Source\PSoC4/ADC.c ****     {
 518:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:Generated_Source\PSoC4/ADC.c ****         #else
 521:Generated_Source\PSoC4/ADC.c ****             result = 0u;
 636              		.loc 1 521 0
 637 002e 0023     		movs	r3, #0
 638 0030 FB60     		str	r3, [r7, #12]
 639              	.L44:
 522:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/ADC.c ****     }
 524:Generated_Source\PSoC4/ADC.c **** 
 525:Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 640              		.loc 1 525 0
 641 0032 FB68     		ldr	r3, [r7, #12]
 642 0034 1BB2     		sxth	r3, r3
 526:Generated_Source\PSoC4/ADC.c **** }
 643              		.loc 1 526 0
 644 0036 1800     		movs	r0, r3
 645 0038 BD46     		mov	sp, r7
 646 003a 04B0     		add	sp, sp, #16
 647              		@ sp needed
 648 003c 80BD     		pop	{r7, pc}
 649              	.L47:
 650 003e C046     		.align	2
 651              	.L46:
 652 0040 80013A40 		.word	1077543296
 653              		.cfi_endproc
 654              	.LFE8:
 655              		.size	ADC_GetResult16, .-ADC_GetResult16
 656              		.section	.text.ADC_SetChanMask,"ax",%progbits
 657              		.align	2
 658              		.global	ADC_SetChanMask
 659              		.code	16
 660              		.thumb_func
 661              		.type	ADC_SetChanMask, %function
 662              	ADC_SetChanMask:
 663              	.LFB9:
 527:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 22


 528:Generated_Source\PSoC4/ADC.c **** 
 529:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:Generated_Source\PSoC4/ADC.c **** *
 533:Generated_Source\PSoC4/ADC.c **** * Summary:
 534:Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/ADC.c **** *
 536:Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/ADC.c **** *
 545:Generated_Source\PSoC4/ADC.c **** * Return:
 546:Generated_Source\PSoC4/ADC.c **** *  None.
 547:Generated_Source\PSoC4/ADC.c **** *
 548:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/ADC.c **** {
 664              		.loc 1 550 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 8
 667              		@ frame_needed = 1, uses_anonymous_args = 0
 668 0000 80B5     		push	{r7, lr}
 669              		.cfi_def_cfa_offset 8
 670              		.cfi_offset 7, -8
 671              		.cfi_offset 14, -4
 672 0002 82B0     		sub	sp, sp, #8
 673              		.cfi_def_cfa_offset 16
 674 0004 00AF     		add	r7, sp, #0
 675              		.cfi_def_cfa_register 7
 676 0006 7860     		str	r0, [r7, #4]
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 677              		.loc 1 551 0
 678 0008 044B     		ldr	r3, .L49
 679 000a 7A68     		ldr	r2, [r7, #4]
 680 000c 0121     		movs	r1, #1
 681 000e 0A40     		ands	r2, r1
 682 0010 1A60     		str	r2, [r3]
 552:Generated_Source\PSoC4/ADC.c **** }
 683              		.loc 1 552 0
 684 0012 C046     		nop
 685 0014 BD46     		mov	sp, r7
 686 0016 02B0     		add	sp, sp, #8
 687              		@ sp needed
 688 0018 80BD     		pop	{r7, pc}
 689              	.L50:
 690 001a C046     		.align	2
 691              	.L49:
 692 001c 20003A40 		.word	1077542944
 693              		.cfi_endproc
 694              	.LFE9:
 695              		.size	ADC_SetChanMask, .-ADC_SetChanMask
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 23


 696              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 697              		.align	2
 698              		.global	ADC_SetLowLimit
 699              		.code	16
 700              		.thumb_func
 701              		.type	ADC_SetLowLimit, %function
 702              	ADC_SetLowLimit:
 703              	.LFB10:
 553:Generated_Source\PSoC4/ADC.c **** 
 554:Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/ADC.c **** 
 556:Generated_Source\PSoC4/ADC.c **** 
 557:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/ADC.c ****     *
 561:Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/ADC.c ****     *
 564:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:Generated_Source\PSoC4/ADC.c ****     *  None.
 566:Generated_Source\PSoC4/ADC.c ****     *
 567:Generated_Source\PSoC4/ADC.c ****     * Return:
 568:Generated_Source\PSoC4/ADC.c ****     *  None.
 569:Generated_Source\PSoC4/ADC.c ****     *
 570:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:Generated_Source\PSoC4/ADC.c ****     {
 573:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/ADC.c ****     }
 575:Generated_Source\PSoC4/ADC.c **** 
 576:Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/ADC.c **** 
 578:Generated_Source\PSoC4/ADC.c **** 
 579:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:Generated_Source\PSoC4/ADC.c **** *
 583:Generated_Source\PSoC4/ADC.c **** * Summary:
 584:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/ADC.c **** *
 586:Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/ADC.c **** *
 589:Generated_Source\PSoC4/ADC.c **** * Return:
 590:Generated_Source\PSoC4/ADC.c **** *  None.
 591:Generated_Source\PSoC4/ADC.c **** *
 592:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/ADC.c **** {
 704              		.loc 1 594 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 8
 707              		@ frame_needed = 1, uses_anonymous_args = 0
 708 0000 80B5     		push	{r7, lr}
 709              		.cfi_def_cfa_offset 8
 710              		.cfi_offset 7, -8
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 24


 711              		.cfi_offset 14, -4
 712 0002 82B0     		sub	sp, sp, #8
 713              		.cfi_def_cfa_offset 16
 714 0004 00AF     		add	r7, sp, #0
 715              		.cfi_def_cfa_register 7
 716 0006 7860     		str	r0, [r7, #4]
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 717              		.loc 1 595 0
 718 0008 084B     		ldr	r3, .L52
 719 000a 084A     		ldr	r2, .L52
 720 000c 1268     		ldr	r2, [r2]
 721 000e 120C     		lsrs	r2, r2, #16
 722 0010 1204     		lsls	r2, r2, #16
 723 0012 1A60     		str	r2, [r3]
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 724              		.loc 1 596 0
 725 0014 054B     		ldr	r3, .L52
 726 0016 054A     		ldr	r2, .L52
 727 0018 1168     		ldr	r1, [r2]
 728 001a 7A68     		ldr	r2, [r7, #4]
 729 001c 1204     		lsls	r2, r2, #16
 730 001e 120C     		lsrs	r2, r2, #16
 731 0020 0A43     		orrs	r2, r1
 732 0022 1A60     		str	r2, [r3]
 597:Generated_Source\PSoC4/ADC.c **** }
 733              		.loc 1 597 0
 734 0024 C046     		nop
 735 0026 BD46     		mov	sp, r7
 736 0028 02B0     		add	sp, sp, #8
 737              		@ sp needed
 738 002a 80BD     		pop	{r7, pc}
 739              	.L53:
 740              		.align	2
 741              	.L52:
 742 002c 18003A40 		.word	1077542936
 743              		.cfi_endproc
 744              	.LFE10:
 745              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 746              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 747              		.align	2
 748              		.global	ADC_SetHighLimit
 749              		.code	16
 750              		.thumb_func
 751              		.type	ADC_SetHighLimit, %function
 752              	ADC_SetHighLimit:
 753              	.LFB11:
 598:Generated_Source\PSoC4/ADC.c **** 
 599:Generated_Source\PSoC4/ADC.c **** 
 600:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:Generated_Source\PSoC4/ADC.c **** *
 604:Generated_Source\PSoC4/ADC.c **** * Summary:
 605:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/ADC.c **** *
 607:Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 25


 609:Generated_Source\PSoC4/ADC.c **** *
 610:Generated_Source\PSoC4/ADC.c **** * Return:
 611:Generated_Source\PSoC4/ADC.c **** *  None.
 612:Generated_Source\PSoC4/ADC.c **** *
 613:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/ADC.c **** {
 754              		.loc 1 615 0
 755              		.cfi_startproc
 756              		@ args = 0, pretend = 0, frame = 8
 757              		@ frame_needed = 1, uses_anonymous_args = 0
 758 0000 80B5     		push	{r7, lr}
 759              		.cfi_def_cfa_offset 8
 760              		.cfi_offset 7, -8
 761              		.cfi_offset 14, -4
 762 0002 82B0     		sub	sp, sp, #8
 763              		.cfi_def_cfa_offset 16
 764 0004 00AF     		add	r7, sp, #0
 765              		.cfi_def_cfa_register 7
 766 0006 7860     		str	r0, [r7, #4]
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 767              		.loc 1 616 0
 768 0008 084B     		ldr	r3, .L55
 769 000a 084A     		ldr	r2, .L55
 770 000c 1268     		ldr	r2, [r2]
 771 000e 1204     		lsls	r2, r2, #16
 772 0010 120C     		lsrs	r2, r2, #16
 773 0012 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 774              		.loc 1 617 0
 775 0014 054B     		ldr	r3, .L55
 776 0016 054A     		ldr	r2, .L55
 777 0018 1168     		ldr	r1, [r2]
 778 001a 7A68     		ldr	r2, [r7, #4]
 779 001c 1204     		lsls	r2, r2, #16
 780 001e 0A43     		orrs	r2, r1
 781 0020 1A60     		str	r2, [r3]
 618:Generated_Source\PSoC4/ADC.c **** }
 782              		.loc 1 618 0
 783 0022 C046     		nop
 784 0024 BD46     		mov	sp, r7
 785 0026 02B0     		add	sp, sp, #8
 786              		@ sp needed
 787 0028 80BD     		pop	{r7, pc}
 788              	.L56:
 789 002a C046     		.align	2
 790              	.L55:
 791 002c 18003A40 		.word	1077542936
 792              		.cfi_endproc
 793              	.LFE11:
 794              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 795              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 796              		.align	2
 797              		.global	ADC_SetLimitMask
 798              		.code	16
 799              		.thumb_func
 800              		.type	ADC_SetLimitMask, %function
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 26


 801              	ADC_SetLimitMask:
 802              	.LFB12:
 619:Generated_Source\PSoC4/ADC.c **** 
 620:Generated_Source\PSoC4/ADC.c **** 
 621:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC.c **** *
 625:Generated_Source\PSoC4/ADC.c **** * Summary:
 626:Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/ADC.c **** *
 628:Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/ADC.c **** *
 634:Generated_Source\PSoC4/ADC.c **** * Return:
 635:Generated_Source\PSoC4/ADC.c **** *  None.
 636:Generated_Source\PSoC4/ADC.c **** *
 637:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/ADC.c **** {
 803              		.loc 1 639 0
 804              		.cfi_startproc
 805              		@ args = 0, pretend = 0, frame = 8
 806              		@ frame_needed = 1, uses_anonymous_args = 0
 807 0000 80B5     		push	{r7, lr}
 808              		.cfi_def_cfa_offset 8
 809              		.cfi_offset 7, -8
 810              		.cfi_offset 14, -4
 811 0002 82B0     		sub	sp, sp, #8
 812              		.cfi_def_cfa_offset 16
 813 0004 00AF     		add	r7, sp, #0
 814              		.cfi_def_cfa_register 7
 815 0006 7860     		str	r0, [r7, #4]
 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 816              		.loc 1 640 0
 817 0008 044B     		ldr	r3, .L58
 818 000a 7A68     		ldr	r2, [r7, #4]
 819 000c 0121     		movs	r1, #1
 820 000e 0A40     		ands	r2, r1
 821 0010 1A60     		str	r2, [r3]
 641:Generated_Source\PSoC4/ADC.c **** }
 822              		.loc 1 641 0
 823 0012 C046     		nop
 824 0014 BD46     		mov	sp, r7
 825 0016 02B0     		add	sp, sp, #8
 826              		@ sp needed
 827 0018 80BD     		pop	{r7, pc}
 828              	.L59:
 829 001a C046     		.align	2
 830              	.L58:
 831 001c 38023A40 		.word	1077543480
 832              		.cfi_endproc
 833              	.LFE12:
 834              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 27


 835              		.section	.text.ADC_SetSatMask,"ax",%progbits
 836              		.align	2
 837              		.global	ADC_SetSatMask
 838              		.code	16
 839              		.thumb_func
 840              		.type	ADC_SetSatMask, %function
 841              	ADC_SetSatMask:
 842              	.LFB13:
 642:Generated_Source\PSoC4/ADC.c **** 
 643:Generated_Source\PSoC4/ADC.c **** 
 644:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:Generated_Source\PSoC4/ADC.c **** *
 648:Generated_Source\PSoC4/ADC.c **** * Summary:
 649:Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/ADC.c **** *
 651:Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/ADC.c **** *
 657:Generated_Source\PSoC4/ADC.c **** * Return:
 658:Generated_Source\PSoC4/ADC.c **** *  None.
 659:Generated_Source\PSoC4/ADC.c **** *
 660:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/ADC.c **** {
 843              		.loc 1 662 0
 844              		.cfi_startproc
 845              		@ args = 0, pretend = 0, frame = 8
 846              		@ frame_needed = 1, uses_anonymous_args = 0
 847 0000 80B5     		push	{r7, lr}
 848              		.cfi_def_cfa_offset 8
 849              		.cfi_offset 7, -8
 850              		.cfi_offset 14, -4
 851 0002 82B0     		sub	sp, sp, #8
 852              		.cfi_def_cfa_offset 16
 853 0004 00AF     		add	r7, sp, #0
 854              		.cfi_def_cfa_register 7
 855 0006 7860     		str	r0, [r7, #4]
 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 856              		.loc 1 663 0
 857 0008 044B     		ldr	r3, .L61
 858 000a 7A68     		ldr	r2, [r7, #4]
 859 000c 0121     		movs	r1, #1
 860 000e 0A40     		ands	r2, r1
 861 0010 1A60     		str	r2, [r3]
 664:Generated_Source\PSoC4/ADC.c **** }
 862              		.loc 1 664 0
 863 0012 C046     		nop
 864 0014 BD46     		mov	sp, r7
 865 0016 02B0     		add	sp, sp, #8
 866              		@ sp needed
 867 0018 80BD     		pop	{r7, pc}
 868              	.L62:
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 28


 869 001a C046     		.align	2
 870              	.L61:
 871 001c 28023A40 		.word	1077543464
 872              		.cfi_endproc
 873              	.LFE13:
 874              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 875              		.section	.text.ADC_SetOffset,"ax",%progbits
 876              		.align	2
 877              		.global	ADC_SetOffset
 878              		.code	16
 879              		.thumb_func
 880              		.type	ADC_SetOffset, %function
 881              	ADC_SetOffset:
 882              	.LFB14:
 665:Generated_Source\PSoC4/ADC.c **** 
 666:Generated_Source\PSoC4/ADC.c **** 
 667:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:Generated_Source\PSoC4/ADC.c **** *
 671:Generated_Source\PSoC4/ADC.c **** * Summary:
 672:Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/ADC.c **** *
 677:Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/ADC.c **** *
 682:Generated_Source\PSoC4/ADC.c **** * Return:
 683:Generated_Source\PSoC4/ADC.c **** *  None.
 684:Generated_Source\PSoC4/ADC.c **** *
 685:Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/ADC.c **** *
 688:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/ADC.c **** {
 883              		.loc 1 690 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 8
 886              		@ frame_needed = 1, uses_anonymous_args = 0
 887 0000 80B5     		push	{r7, lr}
 888              		.cfi_def_cfa_offset 8
 889              		.cfi_offset 7, -8
 890              		.cfi_offset 14, -4
 891 0002 82B0     		sub	sp, sp, #8
 892              		.cfi_def_cfa_offset 16
 893 0004 00AF     		add	r7, sp, #0
 894              		.cfi_def_cfa_register 7
 895 0006 7860     		str	r0, [r7, #4]
 896 0008 0A00     		movs	r2, r1
 897 000a BB1C     		adds	r3, r7, #2
 898 000c 1A80     		strh	r2, [r3]
 691:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 29


 692:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 899              		.loc 1 692 0
 900 000e 7B68     		ldr	r3, [r7, #4]
 901 0010 002B     		cmp	r3, #0
 902 0012 02D0     		beq	.L64
 903              		.loc 1 692 0 is_stmt 0 discriminator 1
 904 0014 0020     		movs	r0, #0
 905 0016 FFF7FEFF 		bl	CyHalt
 906              	.L64:
 693:Generated_Source\PSoC4/ADC.c **** 
 694:Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 907              		.loc 1 694 0 is_stmt 1
 908 001a 054B     		ldr	r3, .L65
 909 001c 7A68     		ldr	r2, [r7, #4]
 910 001e 5200     		lsls	r2, r2, #1
 911 0020 B91C     		adds	r1, r7, #2
 912 0022 0988     		ldrh	r1, [r1]
 913 0024 D152     		strh	r1, [r2, r3]
 695:Generated_Source\PSoC4/ADC.c **** }
 914              		.loc 1 695 0
 915 0026 C046     		nop
 916 0028 BD46     		mov	sp, r7
 917 002a 02B0     		add	sp, sp, #8
 918              		@ sp needed
 919 002c 80BD     		pop	{r7, pc}
 920              	.L66:
 921 002e C046     		.align	2
 922              	.L65:
 923 0030 00000000 		.word	ADC_offset
 924              		.cfi_endproc
 925              	.LFE14:
 926              		.size	ADC_SetOffset, .-ADC_SetOffset
 927              		.section	.text.ADC_SetGain,"ax",%progbits
 928              		.align	2
 929              		.global	ADC_SetGain
 930              		.code	16
 931              		.thumb_func
 932              		.type	ADC_SetGain, %function
 933              	ADC_SetGain:
 934              	.LFB15:
 696:Generated_Source\PSoC4/ADC.c **** 
 697:Generated_Source\PSoC4/ADC.c **** 
 698:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:Generated_Source\PSoC4/ADC.c **** *
 702:Generated_Source\PSoC4/ADC.c **** * Summary:
 703:Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/ADC.c **** *
 711:Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 30


 713:Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/ADC.c **** *
 715:Generated_Source\PSoC4/ADC.c **** * Return:
 716:Generated_Source\PSoC4/ADC.c **** *  None.
 717:Generated_Source\PSoC4/ADC.c **** *
 718:Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/ADC.c **** *
 722:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/ADC.c **** {
 935              		.loc 1 724 0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 8
 938              		@ frame_needed = 1, uses_anonymous_args = 0
 939 0000 80B5     		push	{r7, lr}
 940              		.cfi_def_cfa_offset 8
 941              		.cfi_offset 7, -8
 942              		.cfi_offset 14, -4
 943 0002 82B0     		sub	sp, sp, #8
 944              		.cfi_def_cfa_offset 16
 945 0004 00AF     		add	r7, sp, #0
 946              		.cfi_def_cfa_register 7
 947 0006 7860     		str	r0, [r7, #4]
 948 0008 3960     		str	r1, [r7]
 725:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 949              		.loc 1 726 0
 950 000a 7B68     		ldr	r3, [r7, #4]
 951 000c 002B     		cmp	r3, #0
 952 000e 02D0     		beq	.L68
 953              		.loc 1 726 0 is_stmt 0 discriminator 1
 954 0010 0020     		movs	r0, #0
 955 0012 FFF7FEFF 		bl	CyHalt
 956              	.L68:
 727:Generated_Source\PSoC4/ADC.c **** 
 728:Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 957              		.loc 1 728 0 is_stmt 1
 958 0016 044B     		ldr	r3, .L69
 959 0018 7A68     		ldr	r2, [r7, #4]
 960 001a 9200     		lsls	r2, r2, #2
 961 001c 3968     		ldr	r1, [r7]
 962 001e D150     		str	r1, [r2, r3]
 729:Generated_Source\PSoC4/ADC.c **** }
 963              		.loc 1 729 0
 964 0020 C046     		nop
 965 0022 BD46     		mov	sp, r7
 966 0024 02B0     		add	sp, sp, #8
 967              		@ sp needed
 968 0026 80BD     		pop	{r7, pc}
 969              	.L70:
 970              		.align	2
 971              	.L69:
 972 0028 00000000 		.word	ADC_countsPer10Volt
 973              		.cfi_endproc
 974              	.LFE15:
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 31


 975              		.size	ADC_SetGain, .-ADC_SetGain
 976              		.global	__aeabi_idiv
 977              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 978              		.align	2
 979              		.global	ADC_CountsTo_mVolts
 980              		.code	16
 981              		.thumb_func
 982              		.type	ADC_CountsTo_mVolts, %function
 983              	ADC_CountsTo_mVolts:
 984              	.LFB16:
 730:Generated_Source\PSoC4/ADC.c **** 
 731:Generated_Source\PSoC4/ADC.c **** 
 732:Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:Generated_Source\PSoC4/ADC.c **** 
 734:Generated_Source\PSoC4/ADC.c **** 
 735:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/ADC.c ****     *
 739:Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/ADC.c ****     *
 743:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/ADC.c ****     *
 747:Generated_Source\PSoC4/ADC.c ****     * Return:
 748:Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/ADC.c ****     *
 750:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/ADC.c ****     *
 755:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/ADC.c ****     {
 985              		.loc 1 757 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 16
 988              		@ frame_needed = 1, uses_anonymous_args = 0
 989 0000 80B5     		push	{r7, lr}
 990              		.cfi_def_cfa_offset 8
 991              		.cfi_offset 7, -8
 992              		.cfi_offset 14, -4
 993 0002 84B0     		sub	sp, sp, #16
 994              		.cfi_def_cfa_offset 24
 995 0004 00AF     		add	r7, sp, #0
 996              		.cfi_def_cfa_register 7
 997 0006 7860     		str	r0, [r7, #4]
 998 0008 0A00     		movs	r2, r1
 999 000a BB1C     		adds	r3, r7, #2
 1000 000c 1A80     		strh	r2, [r3]
 758:Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/ADC.c **** 
 760:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 32


 761:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1001              		.loc 1 761 0
 1002 000e 7B68     		ldr	r3, [r7, #4]
 1003 0010 002B     		cmp	r3, #0
 1004 0012 02D0     		beq	.L72
 1005              		.loc 1 761 0 is_stmt 0 discriminator 1
 1006 0014 0020     		movs	r0, #0
 1007 0016 FFF7FEFF 		bl	CyHalt
 1008              	.L72:
 762:Generated_Source\PSoC4/ADC.c **** 
 763:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/ADC.c ****             {
 767:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/ADC.c ****             }
 769:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:Generated_Source\PSoC4/ADC.c **** 
 771:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1009              		.loc 1 772 0 is_stmt 1
 1010 001a 1E4B     		ldr	r3, .L78
 1011 001c 7A68     		ldr	r2, [r7, #4]
 1012 001e 5200     		lsls	r2, r2, #1
 1013 0020 D35A     		ldrh	r3, [r2, r3]
 1014 0022 19B2     		sxth	r1, r3
 1015 0024 BB1C     		adds	r3, r7, #2
 1016 0026 1A88     		ldrh	r2, [r3]
 1017 0028 8BB2     		uxth	r3, r1
 1018 002a D31A     		subs	r3, r2, r3
 1019 002c 9AB2     		uxth	r2, r3
 1020 002e BB1C     		adds	r3, r7, #2
 1021 0030 1A80     		strh	r2, [r3]
 773:Generated_Source\PSoC4/ADC.c **** 
 774:Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1022              		.loc 1 774 0
 1023 0032 BB1C     		adds	r3, r7, #2
 1024 0034 0022     		movs	r2, #0
 1025 0036 9B5E     		ldrsh	r3, [r3, r2]
 1026 0038 174A     		ldr	r2, .L78+4
 1027 003a 5A43     		muls	r2, r3
 775:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1028              		.loc 1 775 0
 1029 003c BB1C     		adds	r3, r7, #2
 1030 003e 0021     		movs	r1, #0
 1031 0040 5B5E     		ldrsh	r3, [r3, r1]
 1032 0042 002B     		cmp	r3, #0
 1033 0044 08DD     		ble	.L73
 1034              		.loc 1 775 0 is_stmt 0 discriminator 1
 1035 0046 154B     		ldr	r3, .L78+8
 1036 0048 7968     		ldr	r1, [r7, #4]
 1037 004a 8900     		lsls	r1, r1, #2
 1038 004c CB58     		ldr	r3, [r1, r3]
 1039 004e 002B     		cmp	r3, #0
 1040 0050 00DA     		bge	.L74
 1041 0052 0133     		adds	r3, r3, #1
 1042              	.L74:
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 33


 1043 0054 5B10     		asrs	r3, r3, #1
 1044 0056 08E0     		b	.L75
 1045              	.L73:
 1046              		.loc 1 775 0 discriminator 2
 1047 0058 104B     		ldr	r3, .L78+8
 1048 005a 7968     		ldr	r1, [r7, #4]
 1049 005c 8900     		lsls	r1, r1, #2
 1050 005e CB58     		ldr	r3, [r1, r3]
 1051 0060 002B     		cmp	r3, #0
 1052 0062 00DA     		bge	.L76
 1053 0064 0133     		adds	r3, r3, #1
 1054              	.L76:
 1055 0066 5B10     		asrs	r3, r3, #1
 1056 0068 5B42     		rsbs	r3, r3, #0
 1057              	.L75:
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1058              		.loc 1 774 0 is_stmt 1
 1059 006a D018     		adds	r0, r2, r3
 776:Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1060              		.loc 1 776 0
 1061 006c 0B4B     		ldr	r3, .L78+8
 1062 006e 7A68     		ldr	r2, [r7, #4]
 1063 0070 9200     		lsls	r2, r2, #2
 1064 0072 D358     		ldr	r3, [r2, r3]
 1065 0074 1900     		movs	r1, r3
 1066 0076 FFF7FEFF 		bl	__aeabi_idiv
 1067 007a 0300     		movs	r3, r0
 1068 007c 1A00     		movs	r2, r3
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1069              		.loc 1 774 0
 1070 007e 0E23     		movs	r3, #14
 1071 0080 FB18     		adds	r3, r7, r3
 1072 0082 1A80     		strh	r2, [r3]
 777:Generated_Source\PSoC4/ADC.c **** 
 778:Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1073              		.loc 1 778 0
 1074 0084 0E23     		movs	r3, #14
 1075 0086 FB18     		adds	r3, r7, r3
 1076 0088 0022     		movs	r2, #0
 1077 008a 9B5E     		ldrsh	r3, [r3, r2]
 779:Generated_Source\PSoC4/ADC.c ****     }
 1078              		.loc 1 779 0
 1079 008c 1800     		movs	r0, r3
 1080 008e BD46     		mov	sp, r7
 1081 0090 04B0     		add	sp, sp, #16
 1082              		@ sp needed
 1083 0092 80BD     		pop	{r7, pc}
 1084              	.L79:
 1085              		.align	2
 1086              	.L78:
 1087 0094 00000000 		.word	ADC_offset
 1088 0098 10270000 		.word	10000
 1089 009c 00000000 		.word	ADC_countsPer10Volt
 1090              		.cfi_endproc
 1091              	.LFE16:
 1092              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1093              		.global	__aeabi_lmul
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 34


 1094              		.global	__aeabi_ldivmod
 1095              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1096              		.align	2
 1097              		.global	ADC_CountsTo_uVolts
 1098              		.code	16
 1099              		.thumb_func
 1100              		.type	ADC_CountsTo_uVolts, %function
 1101              	ADC_CountsTo_uVolts:
 1102              	.LFB17:
 780:Generated_Source\PSoC4/ADC.c **** 
 781:Generated_Source\PSoC4/ADC.c **** 
 782:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/ADC.c ****     *
 786:Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/ADC.c ****     *
 790:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/ADC.c ****     *
 794:Generated_Source\PSoC4/ADC.c ****     * Return:
 795:Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/ADC.c ****     *
 797:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/ADC.c ****     *
 802:Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/ADC.c ****     *
 809:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/ADC.c ****     {
 1103              		.loc 1 811 0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 24
 1106              		@ frame_needed = 1, uses_anonymous_args = 0
 1107 0000 B0B5     		push	{r4, r5, r7, lr}
 1108              		.cfi_def_cfa_offset 16
 1109              		.cfi_offset 4, -16
 1110              		.cfi_offset 5, -12
 1111              		.cfi_offset 7, -8
 1112              		.cfi_offset 14, -4
 1113 0002 86B0     		sub	sp, sp, #24
 1114              		.cfi_def_cfa_offset 40
 1115 0004 00AF     		add	r7, sp, #0
 1116              		.cfi_def_cfa_register 7
 1117 0006 F860     		str	r0, [r7, #12]
 1118 0008 0A00     		movs	r2, r1
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 35


 1119 000a 0A23     		movs	r3, #10
 1120 000c FB18     		adds	r3, r7, r3
 1121 000e 1A80     		strh	r2, [r3]
 812:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/ADC.c **** 
 814:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1122              		.loc 1 815 0
 1123 0010 FB68     		ldr	r3, [r7, #12]
 1124 0012 002B     		cmp	r3, #0
 1125 0014 02D0     		beq	.L81
 1126              		.loc 1 815 0 is_stmt 0 discriminator 1
 1127 0016 0020     		movs	r0, #0
 1128 0018 FFF7FEFF 		bl	CyHalt
 1129              	.L81:
 816:Generated_Source\PSoC4/ADC.c **** 
 817:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/ADC.c ****             {
 821:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/ADC.c ****             }
 823:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:Generated_Source\PSoC4/ADC.c **** 
 825:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1130              		.loc 1 826 0 is_stmt 1
 1131 001c 194B     		ldr	r3, .L83
 1132 001e FA68     		ldr	r2, [r7, #12]
 1133 0020 5200     		lsls	r2, r2, #1
 1134 0022 D35A     		ldrh	r3, [r2, r3]
 1135 0024 19B2     		sxth	r1, r3
 1136 0026 0A23     		movs	r3, #10
 1137 0028 FB18     		adds	r3, r7, r3
 1138 002a 1A88     		ldrh	r2, [r3]
 1139 002c 8BB2     		uxth	r3, r1
 1140 002e D31A     		subs	r3, r2, r3
 1141 0030 9AB2     		uxth	r2, r3
 1142 0032 0A23     		movs	r3, #10
 1143 0034 FB18     		adds	r3, r7, r3
 1144 0036 1A80     		strh	r2, [r3]
 827:Generated_Source\PSoC4/ADC.c **** 
 828:Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1145              		.loc 1 828 0
 1146 0038 0A23     		movs	r3, #10
 1147 003a FB18     		adds	r3, r7, r3
 1148 003c 1B88     		ldrh	r3, [r3]
 1149 003e 1BB2     		sxth	r3, r3
 1150 0040 3B60     		str	r3, [r7]
 1151 0042 DB17     		asrs	r3, r3, #31
 1152 0044 7B60     		str	r3, [r7, #4]
 1153 0046 104A     		ldr	r2, .L83+4
 1154 0048 0023     		movs	r3, #0
 1155 004a 3868     		ldr	r0, [r7]
 1156 004c 7968     		ldr	r1, [r7, #4]
 1157 004e FFF7FEFF 		bl	__aeabi_lmul
 1158 0052 0200     		movs	r2, r0
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 36


 1159 0054 0B00     		movs	r3, r1
 1160 0056 1000     		movs	r0, r2
 1161 0058 1900     		movs	r1, r3
 1162 005a 0C4B     		ldr	r3, .L83+8
 1163 005c FA68     		ldr	r2, [r7, #12]
 1164 005e 9200     		lsls	r2, r2, #2
 1165 0060 D358     		ldr	r3, [r2, r3]
 1166 0062 1C00     		movs	r4, r3
 1167 0064 DB17     		asrs	r3, r3, #31
 1168 0066 1D00     		movs	r5, r3
 1169 0068 2200     		movs	r2, r4
 1170 006a 2B00     		movs	r3, r5
 1171 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1172 0070 0300     		movs	r3, r0
 1173 0072 0C00     		movs	r4, r1
 1174 0074 3B61     		str	r3, [r7, #16]
 1175 0076 7C61     		str	r4, [r7, #20]
 829:Generated_Source\PSoC4/ADC.c **** 
 830:Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1176              		.loc 1 830 0
 1177 0078 3B69     		ldr	r3, [r7, #16]
 831:Generated_Source\PSoC4/ADC.c ****     }
 1178              		.loc 1 831 0
 1179 007a 1800     		movs	r0, r3
 1180 007c BD46     		mov	sp, r7
 1181 007e 06B0     		add	sp, sp, #24
 1182              		@ sp needed
 1183 0080 B0BD     		pop	{r4, r5, r7, pc}
 1184              	.L84:
 1185 0082 C046     		.align	2
 1186              	.L83:
 1187 0084 00000000 		.word	ADC_offset
 1188 0088 80969800 		.word	10000000
 1189 008c 00000000 		.word	ADC_countsPer10Volt
 1190              		.cfi_endproc
 1191              	.LFE17:
 1192              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1193              		.global	__aeabi_i2f
 1194              		.global	__aeabi_fmul
 1195              		.global	__aeabi_fdiv
 1196              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1197              		.align	2
 1198              		.global	ADC_CountsTo_Volts
 1199              		.code	16
 1200              		.thumb_func
 1201              		.type	ADC_CountsTo_Volts, %function
 1202              	ADC_CountsTo_Volts:
 1203              	.LFB18:
 832:Generated_Source\PSoC4/ADC.c **** 
 833:Generated_Source\PSoC4/ADC.c **** 
 834:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/ADC.c ****     *
 838:Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 37


 841:Generated_Source\PSoC4/ADC.c ****     *
 842:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/ADC.c ****     *
 846:Generated_Source\PSoC4/ADC.c ****     * Return:
 847:Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/ADC.c ****     *
 849:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/ADC.c ****     *
 854:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/ADC.c ****     {
 1204              		.loc 1 856 0
 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 16
 1207              		@ frame_needed = 1, uses_anonymous_args = 0
 1208 0000 90B5     		push	{r4, r7, lr}
 1209              		.cfi_def_cfa_offset 12
 1210              		.cfi_offset 4, -12
 1211              		.cfi_offset 7, -8
 1212              		.cfi_offset 14, -4
 1213 0002 85B0     		sub	sp, sp, #20
 1214              		.cfi_def_cfa_offset 32
 1215 0004 00AF     		add	r7, sp, #0
 1216              		.cfi_def_cfa_register 7
 1217 0006 7860     		str	r0, [r7, #4]
 1218 0008 0A00     		movs	r2, r1
 1219 000a BB1C     		adds	r3, r7, #2
 1220 000c 1A80     		strh	r2, [r3]
 857:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:Generated_Source\PSoC4/ADC.c **** 
 859:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1221              		.loc 1 860 0
 1222 000e 7B68     		ldr	r3, [r7, #4]
 1223 0010 002B     		cmp	r3, #0
 1224 0012 02D0     		beq	.L86
 1225              		.loc 1 860 0 is_stmt 0 discriminator 1
 1226 0014 0020     		movs	r0, #0
 1227 0016 FFF7FEFF 		bl	CyHalt
 1228              	.L86:
 861:Generated_Source\PSoC4/ADC.c **** 
 862:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/ADC.c ****             {
 866:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/ADC.c ****             }
 868:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:Generated_Source\PSoC4/ADC.c **** 
 870:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1229              		.loc 1 871 0 is_stmt 1
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 38


 1230 001a 164B     		ldr	r3, .L88
 1231 001c 7A68     		ldr	r2, [r7, #4]
 1232 001e 5200     		lsls	r2, r2, #1
 1233 0020 D35A     		ldrh	r3, [r2, r3]
 1234 0022 19B2     		sxth	r1, r3
 1235 0024 BB1C     		adds	r3, r7, #2
 1236 0026 1A88     		ldrh	r2, [r3]
 1237 0028 8BB2     		uxth	r3, r1
 1238 002a D31A     		subs	r3, r2, r3
 1239 002c 9AB2     		uxth	r2, r3
 1240 002e BB1C     		adds	r3, r7, #2
 1241 0030 1A80     		strh	r2, [r3]
 872:Generated_Source\PSoC4/ADC.c **** 
 873:Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1242              		.loc 1 873 0
 1243 0032 BB1C     		adds	r3, r7, #2
 1244 0034 0022     		movs	r2, #0
 1245 0036 9B5E     		ldrsh	r3, [r3, r2]
 1246 0038 1800     		movs	r0, r3
 1247 003a FFF7FEFF 		bl	__aeabi_i2f
 1248 003e 031C     		adds	r3, r0, #0
 1249 0040 0D49     		ldr	r1, .L88+4
 1250 0042 181C     		adds	r0, r3, #0
 1251 0044 FFF7FEFF 		bl	__aeabi_fmul
 1252 0048 031C     		adds	r3, r0, #0
 1253 004a 1C1C     		adds	r4, r3, #0
 1254 004c 0B4B     		ldr	r3, .L88+8
 1255 004e 7A68     		ldr	r2, [r7, #4]
 1256 0050 9200     		lsls	r2, r2, #2
 1257 0052 D358     		ldr	r3, [r2, r3]
 1258 0054 1800     		movs	r0, r3
 1259 0056 FFF7FEFF 		bl	__aeabi_i2f
 1260 005a 031C     		adds	r3, r0, #0
 1261 005c 191C     		adds	r1, r3, #0
 1262 005e 201C     		adds	r0, r4, #0
 1263 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1264 0064 031C     		adds	r3, r0, #0
 1265 0066 FB60     		str	r3, [r7, #12]
 874:Generated_Source\PSoC4/ADC.c **** 
 875:Generated_Source\PSoC4/ADC.c ****         return( volts );
 1266              		.loc 1 875 0
 1267 0068 FB68     		ldr	r3, [r7, #12]
 876:Generated_Source\PSoC4/ADC.c ****     }
 1268              		.loc 1 876 0
 1269 006a 181C     		adds	r0, r3, #0
 1270 006c BD46     		mov	sp, r7
 1271 006e 05B0     		add	sp, sp, #20
 1272              		@ sp needed
 1273 0070 90BD     		pop	{r4, r7, pc}
 1274              	.L89:
 1275 0072 C046     		.align	2
 1276              	.L88:
 1277 0074 00000000 		.word	ADC_offset
 1278 0078 00002041 		.word	1092616192
 1279 007c 00000000 		.word	ADC_countsPer10Volt
 1280              		.cfi_endproc
 1281              	.LFE18:
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 39


 1282              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1283              		.text
 1284              	.Letext0:
 1285              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1286              		.section	.debug_info,"",%progbits
 1287              	.Ldebug_info0:
 1288 0000 8D040000 		.4byte	0x48d
 1289 0004 0400     		.2byte	0x4
 1290 0006 00000000 		.4byte	.Ldebug_abbrev0
 1291 000a 04       		.byte	0x4
 1292 000b 01       		.uleb128 0x1
 1293 000c A7010000 		.4byte	.LASF60
 1294 0010 0C       		.byte	0xc
 1295 0011 A3020000 		.4byte	.LASF61
 1296 0015 8B000000 		.4byte	.LASF62
 1297 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1298 001d 00000000 		.4byte	0
 1299 0021 00000000 		.4byte	.Ldebug_line0
 1300 0025 02       		.uleb128 0x2
 1301 0026 01       		.byte	0x1
 1302 0027 06       		.byte	0x6
 1303 0028 68000000 		.4byte	.LASF0
 1304 002c 02       		.uleb128 0x2
 1305 002d 01       		.byte	0x1
 1306 002e 08       		.byte	0x8
 1307 002f 00030000 		.4byte	.LASF1
 1308 0033 02       		.uleb128 0x2
 1309 0034 02       		.byte	0x2
 1310 0035 05       		.byte	0x5
 1311 0036 19030000 		.4byte	.LASF2
 1312 003a 02       		.uleb128 0x2
 1313 003b 02       		.byte	0x2
 1314 003c 07       		.byte	0x7
 1315 003d 84010000 		.4byte	.LASF3
 1316 0041 02       		.uleb128 0x2
 1317 0042 04       		.byte	0x4
 1318 0043 05       		.byte	0x5
 1319 0044 D0000000 		.4byte	.LASF4
 1320 0048 02       		.uleb128 0x2
 1321 0049 04       		.byte	0x4
 1322 004a 07       		.byte	0x7
 1323 004b 53010000 		.4byte	.LASF5
 1324 004f 02       		.uleb128 0x2
 1325 0050 08       		.byte	0x8
 1326 0051 05       		.byte	0x5
 1327 0052 5A000000 		.4byte	.LASF6
 1328 0056 02       		.uleb128 0x2
 1329 0057 08       		.byte	0x8
 1330 0058 07       		.byte	0x7
 1331 0059 32000000 		.4byte	.LASF7
 1332 005d 03       		.uleb128 0x3
 1333 005e 04       		.byte	0x4
 1334 005f 05       		.byte	0x5
 1335 0060 696E7400 		.ascii	"int\000"
 1336 0064 02       		.uleb128 0x2
 1337 0065 04       		.byte	0x4
 1338 0066 07       		.byte	0x7
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 40


 1339 0067 3F010000 		.4byte	.LASF8
 1340 006b 04       		.uleb128 0x4
 1341 006c 01010000 		.4byte	.LASF9
 1342 0070 02       		.byte	0x2
 1343 0071 D201     		.2byte	0x1d2
 1344 0073 2C000000 		.4byte	0x2c
 1345 0077 04       		.uleb128 0x4
 1346 0078 00000000 		.4byte	.LASF10
 1347 007c 02       		.byte	0x2
 1348 007d D301     		.2byte	0x1d3
 1349 007f 3A000000 		.4byte	0x3a
 1350 0083 04       		.uleb128 0x4
 1351 0084 0E010000 		.4byte	.LASF11
 1352 0088 02       		.byte	0x2
 1353 0089 D401     		.2byte	0x1d4
 1354 008b 48000000 		.4byte	0x48
 1355 008f 04       		.uleb128 0x4
 1356 0090 6B030000 		.4byte	.LASF12
 1357 0094 02       		.byte	0x2
 1358 0095 D601     		.2byte	0x1d6
 1359 0097 33000000 		.4byte	0x33
 1360 009b 04       		.uleb128 0x4
 1361 009c 7B000000 		.4byte	.LASF13
 1362 00a0 02       		.byte	0x2
 1363 00a1 D701     		.2byte	0x1d7
 1364 00a3 41000000 		.4byte	0x41
 1365 00a7 04       		.uleb128 0x4
 1366 00a8 42020000 		.4byte	.LASF14
 1367 00ac 02       		.byte	0x2
 1368 00ad D801     		.2byte	0x1d8
 1369 00af B3000000 		.4byte	0xb3
 1370 00b3 02       		.uleb128 0x2
 1371 00b4 04       		.byte	0x4
 1372 00b5 04       		.byte	0x4
 1373 00b6 CC020000 		.4byte	.LASF15
 1374 00ba 02       		.uleb128 0x2
 1375 00bb 08       		.byte	0x8
 1376 00bc 04       		.byte	0x4
 1377 00bd 07010000 		.4byte	.LASF16
 1378 00c1 04       		.uleb128 0x4
 1379 00c2 8D020000 		.4byte	.LASF17
 1380 00c6 02       		.byte	0x2
 1381 00c7 DD01     		.2byte	0x1dd
 1382 00c9 4F000000 		.4byte	0x4f
 1383 00cd 02       		.uleb128 0x2
 1384 00ce 01       		.byte	0x1
 1385 00cf 08       		.byte	0x8
 1386 00d0 37030000 		.4byte	.LASF18
 1387 00d4 04       		.uleb128 0x4
 1388 00d5 3C020000 		.4byte	.LASF19
 1389 00d9 02       		.byte	0x2
 1390 00da 7E02     		.2byte	0x27e
 1391 00dc E0000000 		.4byte	0xe0
 1392 00e0 05       		.uleb128 0x5
 1393 00e1 83000000 		.4byte	0x83
 1394 00e5 02       		.uleb128 0x2
 1395 00e6 08       		.byte	0x8
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 41


 1396 00e7 04       		.byte	0x4
 1397 00e8 5C020000 		.4byte	.LASF20
 1398 00ec 02       		.uleb128 0x2
 1399 00ed 04       		.byte	0x4
 1400 00ee 07       		.byte	0x7
 1401 00ef 4A020000 		.4byte	.LASF21
 1402 00f3 06       		.uleb128 0x6
 1403 00f4 81000000 		.4byte	.LASF25
 1404 00f8 01       		.byte	0x1
 1405 00f9 3F       		.byte	0x3f
 1406 00fa 00000000 		.4byte	.LFB1
 1407 00fe 24000000 		.4byte	.LFE1-.LFB1
 1408 0102 01       		.uleb128 0x1
 1409 0103 9C       		.byte	0x9c
 1410 0104 07       		.uleb128 0x7
 1411 0105 29000000 		.4byte	.LASF36
 1412 0109 01       		.byte	0x1
 1413 010a 5E       		.byte	0x5e
 1414 010b 00000000 		.4byte	.LFB2
 1415 010f C4010000 		.4byte	.LFE2-.LFB2
 1416 0113 01       		.uleb128 0x1
 1417 0114 9C       		.byte	0x9c
 1418 0115 44010000 		.4byte	0x144
 1419 0119 08       		.uleb128 0x8
 1420 011a 2C030000 		.4byte	.LASF22
 1421 011e 01       		.byte	0x1
 1422 011f 60       		.byte	0x60
 1423 0120 83000000 		.4byte	0x83
 1424 0124 02       		.uleb128 0x2
 1425 0125 91       		.byte	0x91
 1426 0126 74       		.sleb128 -12
 1427 0127 08       		.uleb128 0x8
 1428 0128 7A010000 		.4byte	.LASF23
 1429 012c 01       		.byte	0x1
 1430 012d 61       		.byte	0x61
 1431 012e 83000000 		.4byte	0x83
 1432 0132 02       		.uleb128 0x2
 1433 0133 91       		.byte	0x91
 1434 0134 6C       		.sleb128 -20
 1435 0135 08       		.uleb128 0x8
 1436 0136 0F000000 		.4byte	.LASF24
 1437 013a 01       		.byte	0x1
 1438 013b 62       		.byte	0x62
 1439 013c 9B000000 		.4byte	0x9b
 1440 0140 02       		.uleb128 0x2
 1441 0141 91       		.byte	0x91
 1442 0142 70       		.sleb128 -16
 1443 0143 00       		.byte	0
 1444 0144 09       		.uleb128 0x9
 1445 0145 60030000 		.4byte	.LASF26
 1446 0149 01       		.byte	0x1
 1447 014a 4A01     		.2byte	0x14a
 1448 014c 00000000 		.4byte	.LFB3
 1449 0150 38000000 		.4byte	.LFE3-.LFB3
 1450 0154 01       		.uleb128 0x1
 1451 0155 9C       		.byte	0x9c
 1452 0156 0A       		.uleb128 0xa
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 42


 1453 0157 23030000 		.4byte	.LASF27
 1454 015b 01       		.byte	0x1
 1455 015c 6D01     		.2byte	0x16d
 1456 015e 00000000 		.4byte	.LFB4
 1457 0162 1C000000 		.4byte	.LFE4-.LFB4
 1458 0166 01       		.uleb128 0x1
 1459 0167 9C       		.byte	0x9c
 1460 0168 0A       		.uleb128 0xa
 1461 0169 49000000 		.4byte	.LASF28
 1462 016d 01       		.byte	0x1
 1463 016e 8701     		.2byte	0x187
 1464 0170 00000000 		.4byte	.LFB5
 1465 0174 1C000000 		.4byte	.LFE5-.LFB5
 1466 0178 01       		.uleb128 0x1
 1467 0179 9C       		.byte	0x9c
 1468 017a 0A       		.uleb128 0xa
 1469 017b 97010000 		.4byte	.LASF29
 1470 017f 01       		.byte	0x1
 1471 0180 A001     		.2byte	0x1a0
 1472 0182 00000000 		.4byte	.LFB6
 1473 0186 20000000 		.4byte	.LFE6-.LFB6
 1474 018a 01       		.uleb128 0x1
 1475 018b 9C       		.byte	0x9c
 1476 018c 0B       		.uleb128 0xb
 1477 018d 79020000 		.4byte	.LASF31
 1478 0191 01       		.byte	0x1
 1479 0192 C201     		.2byte	0x1c2
 1480 0194 83000000 		.4byte	0x83
 1481 0198 00000000 		.4byte	.LFB7
 1482 019c 48000000 		.4byte	.LFE7-.LFB7
 1483 01a0 01       		.uleb128 0x1
 1484 01a1 9C       		.byte	0x9c
 1485 01a2 C5010000 		.4byte	0x1c5
 1486 01a6 0C       		.uleb128 0xc
 1487 01a7 26010000 		.4byte	.LASF33
 1488 01ab 01       		.byte	0x1
 1489 01ac C201     		.2byte	0x1c2
 1490 01ae 83000000 		.4byte	0x83
 1491 01b2 02       		.uleb128 0x2
 1492 01b3 91       		.byte	0x91
 1493 01b4 6C       		.sleb128 -20
 1494 01b5 0D       		.uleb128 0xd
 1495 01b6 74000000 		.4byte	.LASF30
 1496 01ba 01       		.byte	0x1
 1497 01bb C401     		.2byte	0x1c4
 1498 01bd 83000000 		.4byte	0x83
 1499 01c1 02       		.uleb128 0x2
 1500 01c2 91       		.byte	0x91
 1501 01c3 74       		.sleb128 -12
 1502 01c4 00       		.byte	0
 1503 01c5 0E       		.uleb128 0xe
 1504 01c6 86030000 		.4byte	.LASF32
 1505 01ca 01       		.byte	0x1
 1506 01cb F801     		.2byte	0x1f8
 1507 01cd 8F000000 		.4byte	0x8f
 1508 01d1 00000000 		.4byte	.LFB8
 1509 01d5 44000000 		.4byte	.LFE8-.LFB8
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 43


 1510 01d9 01       		.uleb128 0x1
 1511 01da 9C       		.byte	0x9c
 1512 01db FE010000 		.4byte	0x1fe
 1513 01df 0C       		.uleb128 0xc
 1514 01e0 32030000 		.4byte	.LASF34
 1515 01e4 01       		.byte	0x1
 1516 01e5 F801     		.2byte	0x1f8
 1517 01e7 83000000 		.4byte	0x83
 1518 01eb 02       		.uleb128 0x2
 1519 01ec 91       		.byte	0x91
 1520 01ed 6C       		.sleb128 -20
 1521 01ee 0D       		.uleb128 0xd
 1522 01ef 7F030000 		.4byte	.LASF35
 1523 01f3 01       		.byte	0x1
 1524 01f4 FA01     		.2byte	0x1fa
 1525 01f6 83000000 		.4byte	0x83
 1526 01fa 02       		.uleb128 0x2
 1527 01fb 91       		.byte	0x91
 1528 01fc 74       		.sleb128 -12
 1529 01fd 00       		.byte	0
 1530 01fe 0F       		.uleb128 0xf
 1531 01ff 93020000 		.4byte	.LASF37
 1532 0203 01       		.byte	0x1
 1533 0204 2502     		.2byte	0x225
 1534 0206 00000000 		.4byte	.LFB9
 1535 020a 20000000 		.4byte	.LFE9-.LFB9
 1536 020e 01       		.uleb128 0x1
 1537 020f 9C       		.byte	0x9c
 1538 0210 24020000 		.4byte	0x224
 1539 0214 0C       		.uleb128 0xc
 1540 0215 15010000 		.4byte	.LASF38
 1541 0219 01       		.byte	0x1
 1542 021a 2502     		.2byte	0x225
 1543 021c 83000000 		.4byte	0x83
 1544 0220 02       		.uleb128 0x2
 1545 0221 91       		.byte	0x91
 1546 0222 74       		.sleb128 -12
 1547 0223 00       		.byte	0
 1548 0224 0F       		.uleb128 0xf
 1549 0225 F0020000 		.4byte	.LASF39
 1550 0229 01       		.byte	0x1
 1551 022a 5102     		.2byte	0x251
 1552 022c 00000000 		.4byte	.LFB10
 1553 0230 30000000 		.4byte	.LFE10-.LFB10
 1554 0234 01       		.uleb128 0x1
 1555 0235 9C       		.byte	0x9c
 1556 0236 4A020000 		.4byte	0x24a
 1557 023a 0C       		.uleb128 0xc
 1558 023b 53020000 		.4byte	.LASF40
 1559 023f 01       		.byte	0x1
 1560 0240 5102     		.2byte	0x251
 1561 0242 83000000 		.4byte	0x83
 1562 0246 02       		.uleb128 0x2
 1563 0247 91       		.byte	0x91
 1564 0248 74       		.sleb128 -12
 1565 0249 00       		.byte	0
 1566 024a 0F       		.uleb128 0xf
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 44


 1567 024b 68020000 		.4byte	.LASF41
 1568 024f 01       		.byte	0x1
 1569 0250 6602     		.2byte	0x266
 1570 0252 00000000 		.4byte	.LFB11
 1571 0256 30000000 		.4byte	.LFE11-.LFB11
 1572 025a 01       		.uleb128 0x1
 1573 025b 9C       		.byte	0x9c
 1574 025c 70020000 		.4byte	0x270
 1575 0260 0C       		.uleb128 0xc
 1576 0261 D2020000 		.4byte	.LASF42
 1577 0265 01       		.byte	0x1
 1578 0266 6602     		.2byte	0x266
 1579 0268 83000000 		.4byte	0x83
 1580 026c 02       		.uleb128 0x2
 1581 026d 91       		.byte	0x91
 1582 026e 74       		.sleb128 -12
 1583 026f 00       		.byte	0
 1584 0270 0F       		.uleb128 0xf
 1585 0271 2E010000 		.4byte	.LASF43
 1586 0275 01       		.byte	0x1
 1587 0276 7E02     		.2byte	0x27e
 1588 0278 00000000 		.4byte	.LFB12
 1589 027c 20000000 		.4byte	.LFE12-.LFB12
 1590 0280 01       		.uleb128 0x1
 1591 0281 9C       		.byte	0x9c
 1592 0282 96020000 		.4byte	0x296
 1593 0286 0C       		.uleb128 0xc
 1594 0287 15010000 		.4byte	.LASF38
 1595 028b 01       		.byte	0x1
 1596 028c 7E02     		.2byte	0x27e
 1597 028e 83000000 		.4byte	0x83
 1598 0292 02       		.uleb128 0x2
 1599 0293 91       		.byte	0x91
 1600 0294 74       		.sleb128 -12
 1601 0295 00       		.byte	0
 1602 0296 0F       		.uleb128 0xf
 1603 0297 65010000 		.4byte	.LASF44
 1604 029b 01       		.byte	0x1
 1605 029c 9502     		.2byte	0x295
 1606 029e 00000000 		.4byte	.LFB13
 1607 02a2 20000000 		.4byte	.LFE13-.LFB13
 1608 02a6 01       		.uleb128 0x1
 1609 02a7 9C       		.byte	0x9c
 1610 02a8 BC020000 		.4byte	0x2bc
 1611 02ac 0C       		.uleb128 0xc
 1612 02ad 15010000 		.4byte	.LASF38
 1613 02b1 01       		.byte	0x1
 1614 02b2 9502     		.2byte	0x295
 1615 02b4 83000000 		.4byte	0x83
 1616 02b8 02       		.uleb128 0x2
 1617 02b9 91       		.byte	0x91
 1618 02ba 74       		.sleb128 -12
 1619 02bb 00       		.byte	0
 1620 02bc 10       		.uleb128 0x10
 1621 02bd 71030000 		.4byte	.LASF45
 1622 02c1 01       		.byte	0x1
 1623 02c2 B102     		.2byte	0x2b1
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 45


 1624 02c4 00000000 		.4byte	.LFB14
 1625 02c8 34000000 		.4byte	.LFE14-.LFB14
 1626 02cc 01       		.uleb128 0x1
 1627 02cd 9C       		.byte	0x9c
 1628 02ce F1020000 		.4byte	0x2f1
 1629 02d2 0C       		.uleb128 0xc
 1630 02d3 32030000 		.4byte	.LASF34
 1631 02d7 01       		.byte	0x1
 1632 02d8 B102     		.2byte	0x2b1
 1633 02da 83000000 		.4byte	0x83
 1634 02de 02       		.uleb128 0x2
 1635 02df 91       		.byte	0x91
 1636 02e0 74       		.sleb128 -12
 1637 02e1 0C       		.uleb128 0xc
 1638 02e2 4F030000 		.4byte	.LASF46
 1639 02e6 01       		.byte	0x1
 1640 02e7 B102     		.2byte	0x2b1
 1641 02e9 8F000000 		.4byte	0x8f
 1642 02ed 02       		.uleb128 0x2
 1643 02ee 91       		.byte	0x91
 1644 02ef 72       		.sleb128 -14
 1645 02f0 00       		.byte	0
 1646 02f1 10       		.uleb128 0x10
 1647 02f2 C0020000 		.4byte	.LASF47
 1648 02f6 01       		.byte	0x1
 1649 02f7 D302     		.2byte	0x2d3
 1650 02f9 00000000 		.4byte	.LFB15
 1651 02fd 2C000000 		.4byte	.LFE15-.LFB15
 1652 0301 01       		.uleb128 0x1
 1653 0302 9C       		.byte	0x9c
 1654 0303 26030000 		.4byte	0x326
 1655 0307 0C       		.uleb128 0xc
 1656 0308 32030000 		.4byte	.LASF34
 1657 030c 01       		.byte	0x1
 1658 030d D302     		.2byte	0x2d3
 1659 030f 83000000 		.4byte	0x83
 1660 0313 02       		.uleb128 0x2
 1661 0314 91       		.byte	0x91
 1662 0315 74       		.sleb128 -12
 1663 0316 0C       		.uleb128 0xc
 1664 0317 07000000 		.4byte	.LASF48
 1665 031b 01       		.byte	0x1
 1666 031c D302     		.2byte	0x2d3
 1667 031e 9B000000 		.4byte	0x9b
 1668 0322 02       		.uleb128 0x2
 1669 0323 91       		.byte	0x91
 1670 0324 70       		.sleb128 -16
 1671 0325 00       		.byte	0
 1672 0326 0E       		.uleb128 0xe
 1673 0327 DC020000 		.4byte	.LASF49
 1674 032b 01       		.byte	0x1
 1675 032c F402     		.2byte	0x2f4
 1676 032e 8F000000 		.4byte	0x8f
 1677 0332 00000000 		.4byte	.LFB16
 1678 0336 A0000000 		.4byte	.LFE16-.LFB16
 1679 033a 01       		.uleb128 0x1
 1680 033b 9C       		.byte	0x9c
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 46


 1681 033c 6E030000 		.4byte	0x36e
 1682 0340 0C       		.uleb128 0xc
 1683 0341 32030000 		.4byte	.LASF34
 1684 0345 01       		.byte	0x1
 1685 0346 F402     		.2byte	0x2f4
 1686 0348 83000000 		.4byte	0x83
 1687 034c 02       		.uleb128 0x2
 1688 034d 91       		.byte	0x91
 1689 034e 6C       		.sleb128 -20
 1690 034f 0C       		.uleb128 0xc
 1691 0350 56030000 		.4byte	.LASF50
 1692 0354 01       		.byte	0x1
 1693 0355 F402     		.2byte	0x2f4
 1694 0357 8F000000 		.4byte	0x8f
 1695 035b 02       		.uleb128 0x2
 1696 035c 91       		.byte	0x91
 1697 035d 6A       		.sleb128 -22
 1698 035e 0D       		.uleb128 0xd
 1699 035f 35020000 		.4byte	.LASF51
 1700 0363 01       		.byte	0x1
 1701 0364 F602     		.2byte	0x2f6
 1702 0366 8F000000 		.4byte	0x8f
 1703 036a 02       		.uleb128 0x2
 1704 036b 91       		.byte	0x91
 1705 036c 76       		.sleb128 -10
 1706 036d 00       		.byte	0
 1707 036e 0E       		.uleb128 0xe
 1708 036f D9000000 		.4byte	.LASF52
 1709 0373 01       		.byte	0x1
 1710 0374 2A03     		.2byte	0x32a
 1711 0376 9B000000 		.4byte	0x9b
 1712 037a 00000000 		.4byte	.LFB17
 1713 037e 90000000 		.4byte	.LFE17-.LFB17
 1714 0382 01       		.uleb128 0x1
 1715 0383 9C       		.byte	0x9c
 1716 0384 B6030000 		.4byte	0x3b6
 1717 0388 0C       		.uleb128 0xc
 1718 0389 32030000 		.4byte	.LASF34
 1719 038d 01       		.byte	0x1
 1720 038e 2A03     		.2byte	0x32a
 1721 0390 83000000 		.4byte	0x83
 1722 0394 02       		.uleb128 0x2
 1723 0395 91       		.byte	0x91
 1724 0396 64       		.sleb128 -28
 1725 0397 0C       		.uleb128 0xc
 1726 0398 56030000 		.4byte	.LASF50
 1727 039c 01       		.byte	0x1
 1728 039d 2A03     		.2byte	0x32a
 1729 039f 8F000000 		.4byte	0x8f
 1730 03a3 02       		.uleb128 0x2
 1731 03a4 91       		.byte	0x91
 1732 03a5 62       		.sleb128 -30
 1733 03a6 0D       		.uleb128 0xd
 1734 03a7 4C010000 		.4byte	.LASF53
 1735 03ab 01       		.byte	0x1
 1736 03ac 2C03     		.2byte	0x32c
 1737 03ae C1000000 		.4byte	0xc1
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 47


 1738 03b2 02       		.uleb128 0x2
 1739 03b3 91       		.byte	0x91
 1740 03b4 68       		.sleb128 -24
 1741 03b5 00       		.byte	0
 1742 03b6 0E       		.uleb128 0xe
 1743 03b7 16000000 		.4byte	.LASF54
 1744 03bb 01       		.byte	0x1
 1745 03bc 5703     		.2byte	0x357
 1746 03be A7000000 		.4byte	0xa7
 1747 03c2 00000000 		.4byte	.LFB18
 1748 03c6 80000000 		.4byte	.LFE18-.LFB18
 1749 03ca 01       		.uleb128 0x1
 1750 03cb 9C       		.byte	0x9c
 1751 03cc FE030000 		.4byte	0x3fe
 1752 03d0 0C       		.uleb128 0xc
 1753 03d1 32030000 		.4byte	.LASF34
 1754 03d5 01       		.byte	0x1
 1755 03d6 5703     		.2byte	0x357
 1756 03d8 83000000 		.4byte	0x83
 1757 03dc 02       		.uleb128 0x2
 1758 03dd 91       		.byte	0x91
 1759 03de 64       		.sleb128 -28
 1760 03df 0C       		.uleb128 0xc
 1761 03e0 56030000 		.4byte	.LASF50
 1762 03e4 01       		.byte	0x1
 1763 03e5 5703     		.2byte	0x357
 1764 03e7 8F000000 		.4byte	0x8f
 1765 03eb 02       		.uleb128 0x2
 1766 03ec 91       		.byte	0x91
 1767 03ed 62       		.sleb128 -30
 1768 03ee 0D       		.uleb128 0xd
 1769 03ef 74010000 		.4byte	.LASF55
 1770 03f3 01       		.byte	0x1
 1771 03f4 5903     		.2byte	0x359
 1772 03f6 A7000000 		.4byte	0xa7
 1773 03fa 02       		.uleb128 0x2
 1774 03fb 91       		.byte	0x91
 1775 03fc 6C       		.sleb128 -20
 1776 03fd 00       		.byte	0
 1777 03fe 11       		.uleb128 0x11
 1778 03ff 0E040000 		.4byte	0x40e
 1779 0403 0E040000 		.4byte	0x40e
 1780 0407 12       		.uleb128 0x12
 1781 0408 EC000000 		.4byte	0xec
 1782 040c 00       		.byte	0
 1783 040d 00       		.byte	0
 1784 040e 13       		.uleb128 0x13
 1785 040f 83000000 		.4byte	0x83
 1786 0413 08       		.uleb128 0x8
 1787 0414 3C030000 		.4byte	.LASF56
 1788 0418 01       		.byte	0x1
 1789 0419 21       		.byte	0x21
 1790 041a 24040000 		.4byte	0x424
 1791 041e 05       		.uleb128 0x5
 1792 041f 03       		.byte	0x3
 1793 0420 00000000 		.4byte	ADC_channelsConfig
 1794 0424 13       		.uleb128 0x13
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 48


 1795 0425 FE030000 		.4byte	0x3fe
 1796 0429 14       		.uleb128 0x14
 1797 042a 1A010000 		.4byte	.LASF57
 1798 042e 01       		.byte	0x1
 1799 042f 18       		.byte	0x18
 1800 0430 6B000000 		.4byte	0x6b
 1801 0434 05       		.uleb128 0x5
 1802 0435 03       		.byte	0x3
 1803 0436 00000000 		.4byte	ADC_initVar
 1804 043a 11       		.uleb128 0x11
 1805 043b 4A040000 		.4byte	0x44a
 1806 043f 4A040000 		.4byte	0x44a
 1807 0443 12       		.uleb128 0x12
 1808 0444 EC000000 		.4byte	0xec
 1809 0448 00       		.byte	0
 1810 0449 00       		.byte	0
 1811 044a 05       		.uleb128 0x5
 1812 044b 8F000000 		.4byte	0x8f
 1813 044f 14       		.uleb128 0x14
 1814 0450 0E030000 		.4byte	.LASF58
 1815 0454 01       		.byte	0x1
 1816 0455 19       		.byte	0x19
 1817 0456 60040000 		.4byte	0x460
 1818 045a 05       		.uleb128 0x5
 1819 045b 03       		.byte	0x3
 1820 045c 00000000 		.4byte	ADC_offset
 1821 0460 05       		.uleb128 0x5
 1822 0461 3A040000 		.4byte	0x43a
 1823 0465 11       		.uleb128 0x11
 1824 0466 75040000 		.4byte	0x475
 1825 046a 75040000 		.4byte	0x475
 1826 046e 12       		.uleb128 0x12
 1827 046f EC000000 		.4byte	0xec
 1828 0473 00       		.byte	0
 1829 0474 00       		.byte	0
 1830 0475 05       		.uleb128 0x5
 1831 0476 9B000000 		.4byte	0x9b
 1832 047a 14       		.uleb128 0x14
 1833 047b ED000000 		.4byte	.LASF59
 1834 047f 01       		.byte	0x1
 1835 0480 1A       		.byte	0x1a
 1836 0481 8B040000 		.4byte	0x48b
 1837 0485 05       		.uleb128 0x5
 1838 0486 03       		.byte	0x3
 1839 0487 00000000 		.4byte	ADC_countsPer10Volt
 1840 048b 05       		.uleb128 0x5
 1841 048c 65040000 		.4byte	0x465
 1842 0490 00       		.byte	0
 1843              		.section	.debug_abbrev,"",%progbits
 1844              	.Ldebug_abbrev0:
 1845 0000 01       		.uleb128 0x1
 1846 0001 11       		.uleb128 0x11
 1847 0002 01       		.byte	0x1
 1848 0003 25       		.uleb128 0x25
 1849 0004 0E       		.uleb128 0xe
 1850 0005 13       		.uleb128 0x13
 1851 0006 0B       		.uleb128 0xb
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 49


 1852 0007 03       		.uleb128 0x3
 1853 0008 0E       		.uleb128 0xe
 1854 0009 1B       		.uleb128 0x1b
 1855 000a 0E       		.uleb128 0xe
 1856 000b 55       		.uleb128 0x55
 1857 000c 17       		.uleb128 0x17
 1858 000d 11       		.uleb128 0x11
 1859 000e 01       		.uleb128 0x1
 1860 000f 10       		.uleb128 0x10
 1861 0010 17       		.uleb128 0x17
 1862 0011 00       		.byte	0
 1863 0012 00       		.byte	0
 1864 0013 02       		.uleb128 0x2
 1865 0014 24       		.uleb128 0x24
 1866 0015 00       		.byte	0
 1867 0016 0B       		.uleb128 0xb
 1868 0017 0B       		.uleb128 0xb
 1869 0018 3E       		.uleb128 0x3e
 1870 0019 0B       		.uleb128 0xb
 1871 001a 03       		.uleb128 0x3
 1872 001b 0E       		.uleb128 0xe
 1873 001c 00       		.byte	0
 1874 001d 00       		.byte	0
 1875 001e 03       		.uleb128 0x3
 1876 001f 24       		.uleb128 0x24
 1877 0020 00       		.byte	0
 1878 0021 0B       		.uleb128 0xb
 1879 0022 0B       		.uleb128 0xb
 1880 0023 3E       		.uleb128 0x3e
 1881 0024 0B       		.uleb128 0xb
 1882 0025 03       		.uleb128 0x3
 1883 0026 08       		.uleb128 0x8
 1884 0027 00       		.byte	0
 1885 0028 00       		.byte	0
 1886 0029 04       		.uleb128 0x4
 1887 002a 16       		.uleb128 0x16
 1888 002b 00       		.byte	0
 1889 002c 03       		.uleb128 0x3
 1890 002d 0E       		.uleb128 0xe
 1891 002e 3A       		.uleb128 0x3a
 1892 002f 0B       		.uleb128 0xb
 1893 0030 3B       		.uleb128 0x3b
 1894 0031 05       		.uleb128 0x5
 1895 0032 49       		.uleb128 0x49
 1896 0033 13       		.uleb128 0x13
 1897 0034 00       		.byte	0
 1898 0035 00       		.byte	0
 1899 0036 05       		.uleb128 0x5
 1900 0037 35       		.uleb128 0x35
 1901 0038 00       		.byte	0
 1902 0039 49       		.uleb128 0x49
 1903 003a 13       		.uleb128 0x13
 1904 003b 00       		.byte	0
 1905 003c 00       		.byte	0
 1906 003d 06       		.uleb128 0x6
 1907 003e 2E       		.uleb128 0x2e
 1908 003f 00       		.byte	0
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 50


 1909 0040 3F       		.uleb128 0x3f
 1910 0041 19       		.uleb128 0x19
 1911 0042 03       		.uleb128 0x3
 1912 0043 0E       		.uleb128 0xe
 1913 0044 3A       		.uleb128 0x3a
 1914 0045 0B       		.uleb128 0xb
 1915 0046 3B       		.uleb128 0x3b
 1916 0047 0B       		.uleb128 0xb
 1917 0048 27       		.uleb128 0x27
 1918 0049 19       		.uleb128 0x19
 1919 004a 11       		.uleb128 0x11
 1920 004b 01       		.uleb128 0x1
 1921 004c 12       		.uleb128 0x12
 1922 004d 06       		.uleb128 0x6
 1923 004e 40       		.uleb128 0x40
 1924 004f 18       		.uleb128 0x18
 1925 0050 9642     		.uleb128 0x2116
 1926 0052 19       		.uleb128 0x19
 1927 0053 00       		.byte	0
 1928 0054 00       		.byte	0
 1929 0055 07       		.uleb128 0x7
 1930 0056 2E       		.uleb128 0x2e
 1931 0057 01       		.byte	0x1
 1932 0058 3F       		.uleb128 0x3f
 1933 0059 19       		.uleb128 0x19
 1934 005a 03       		.uleb128 0x3
 1935 005b 0E       		.uleb128 0xe
 1936 005c 3A       		.uleb128 0x3a
 1937 005d 0B       		.uleb128 0xb
 1938 005e 3B       		.uleb128 0x3b
 1939 005f 0B       		.uleb128 0xb
 1940 0060 27       		.uleb128 0x27
 1941 0061 19       		.uleb128 0x19
 1942 0062 11       		.uleb128 0x11
 1943 0063 01       		.uleb128 0x1
 1944 0064 12       		.uleb128 0x12
 1945 0065 06       		.uleb128 0x6
 1946 0066 40       		.uleb128 0x40
 1947 0067 18       		.uleb128 0x18
 1948 0068 9642     		.uleb128 0x2116
 1949 006a 19       		.uleb128 0x19
 1950 006b 01       		.uleb128 0x1
 1951 006c 13       		.uleb128 0x13
 1952 006d 00       		.byte	0
 1953 006e 00       		.byte	0
 1954 006f 08       		.uleb128 0x8
 1955 0070 34       		.uleb128 0x34
 1956 0071 00       		.byte	0
 1957 0072 03       		.uleb128 0x3
 1958 0073 0E       		.uleb128 0xe
 1959 0074 3A       		.uleb128 0x3a
 1960 0075 0B       		.uleb128 0xb
 1961 0076 3B       		.uleb128 0x3b
 1962 0077 0B       		.uleb128 0xb
 1963 0078 49       		.uleb128 0x49
 1964 0079 13       		.uleb128 0x13
 1965 007a 02       		.uleb128 0x2
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 51


 1966 007b 18       		.uleb128 0x18
 1967 007c 00       		.byte	0
 1968 007d 00       		.byte	0
 1969 007e 09       		.uleb128 0x9
 1970 007f 2E       		.uleb128 0x2e
 1971 0080 00       		.byte	0
 1972 0081 3F       		.uleb128 0x3f
 1973 0082 19       		.uleb128 0x19
 1974 0083 03       		.uleb128 0x3
 1975 0084 0E       		.uleb128 0xe
 1976 0085 3A       		.uleb128 0x3a
 1977 0086 0B       		.uleb128 0xb
 1978 0087 3B       		.uleb128 0x3b
 1979 0088 05       		.uleb128 0x5
 1980 0089 27       		.uleb128 0x27
 1981 008a 19       		.uleb128 0x19
 1982 008b 11       		.uleb128 0x11
 1983 008c 01       		.uleb128 0x1
 1984 008d 12       		.uleb128 0x12
 1985 008e 06       		.uleb128 0x6
 1986 008f 40       		.uleb128 0x40
 1987 0090 18       		.uleb128 0x18
 1988 0091 9642     		.uleb128 0x2116
 1989 0093 19       		.uleb128 0x19
 1990 0094 00       		.byte	0
 1991 0095 00       		.byte	0
 1992 0096 0A       		.uleb128 0xa
 1993 0097 2E       		.uleb128 0x2e
 1994 0098 00       		.byte	0
 1995 0099 3F       		.uleb128 0x3f
 1996 009a 19       		.uleb128 0x19
 1997 009b 03       		.uleb128 0x3
 1998 009c 0E       		.uleb128 0xe
 1999 009d 3A       		.uleb128 0x3a
 2000 009e 0B       		.uleb128 0xb
 2001 009f 3B       		.uleb128 0x3b
 2002 00a0 05       		.uleb128 0x5
 2003 00a1 27       		.uleb128 0x27
 2004 00a2 19       		.uleb128 0x19
 2005 00a3 11       		.uleb128 0x11
 2006 00a4 01       		.uleb128 0x1
 2007 00a5 12       		.uleb128 0x12
 2008 00a6 06       		.uleb128 0x6
 2009 00a7 40       		.uleb128 0x40
 2010 00a8 18       		.uleb128 0x18
 2011 00a9 9742     		.uleb128 0x2117
 2012 00ab 19       		.uleb128 0x19
 2013 00ac 00       		.byte	0
 2014 00ad 00       		.byte	0
 2015 00ae 0B       		.uleb128 0xb
 2016 00af 2E       		.uleb128 0x2e
 2017 00b0 01       		.byte	0x1
 2018 00b1 3F       		.uleb128 0x3f
 2019 00b2 19       		.uleb128 0x19
 2020 00b3 03       		.uleb128 0x3
 2021 00b4 0E       		.uleb128 0xe
 2022 00b5 3A       		.uleb128 0x3a
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 52


 2023 00b6 0B       		.uleb128 0xb
 2024 00b7 3B       		.uleb128 0x3b
 2025 00b8 05       		.uleb128 0x5
 2026 00b9 27       		.uleb128 0x27
 2027 00ba 19       		.uleb128 0x19
 2028 00bb 49       		.uleb128 0x49
 2029 00bc 13       		.uleb128 0x13
 2030 00bd 11       		.uleb128 0x11
 2031 00be 01       		.uleb128 0x1
 2032 00bf 12       		.uleb128 0x12
 2033 00c0 06       		.uleb128 0x6
 2034 00c1 40       		.uleb128 0x40
 2035 00c2 18       		.uleb128 0x18
 2036 00c3 9742     		.uleb128 0x2117
 2037 00c5 19       		.uleb128 0x19
 2038 00c6 01       		.uleb128 0x1
 2039 00c7 13       		.uleb128 0x13
 2040 00c8 00       		.byte	0
 2041 00c9 00       		.byte	0
 2042 00ca 0C       		.uleb128 0xc
 2043 00cb 05       		.uleb128 0x5
 2044 00cc 00       		.byte	0
 2045 00cd 03       		.uleb128 0x3
 2046 00ce 0E       		.uleb128 0xe
 2047 00cf 3A       		.uleb128 0x3a
 2048 00d0 0B       		.uleb128 0xb
 2049 00d1 3B       		.uleb128 0x3b
 2050 00d2 05       		.uleb128 0x5
 2051 00d3 49       		.uleb128 0x49
 2052 00d4 13       		.uleb128 0x13
 2053 00d5 02       		.uleb128 0x2
 2054 00d6 18       		.uleb128 0x18
 2055 00d7 00       		.byte	0
 2056 00d8 00       		.byte	0
 2057 00d9 0D       		.uleb128 0xd
 2058 00da 34       		.uleb128 0x34
 2059 00db 00       		.byte	0
 2060 00dc 03       		.uleb128 0x3
 2061 00dd 0E       		.uleb128 0xe
 2062 00de 3A       		.uleb128 0x3a
 2063 00df 0B       		.uleb128 0xb
 2064 00e0 3B       		.uleb128 0x3b
 2065 00e1 05       		.uleb128 0x5
 2066 00e2 49       		.uleb128 0x49
 2067 00e3 13       		.uleb128 0x13
 2068 00e4 02       		.uleb128 0x2
 2069 00e5 18       		.uleb128 0x18
 2070 00e6 00       		.byte	0
 2071 00e7 00       		.byte	0
 2072 00e8 0E       		.uleb128 0xe
 2073 00e9 2E       		.uleb128 0x2e
 2074 00ea 01       		.byte	0x1
 2075 00eb 3F       		.uleb128 0x3f
 2076 00ec 19       		.uleb128 0x19
 2077 00ed 03       		.uleb128 0x3
 2078 00ee 0E       		.uleb128 0xe
 2079 00ef 3A       		.uleb128 0x3a
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 53


 2080 00f0 0B       		.uleb128 0xb
 2081 00f1 3B       		.uleb128 0x3b
 2082 00f2 05       		.uleb128 0x5
 2083 00f3 27       		.uleb128 0x27
 2084 00f4 19       		.uleb128 0x19
 2085 00f5 49       		.uleb128 0x49
 2086 00f6 13       		.uleb128 0x13
 2087 00f7 11       		.uleb128 0x11
 2088 00f8 01       		.uleb128 0x1
 2089 00f9 12       		.uleb128 0x12
 2090 00fa 06       		.uleb128 0x6
 2091 00fb 40       		.uleb128 0x40
 2092 00fc 18       		.uleb128 0x18
 2093 00fd 9642     		.uleb128 0x2116
 2094 00ff 19       		.uleb128 0x19
 2095 0100 01       		.uleb128 0x1
 2096 0101 13       		.uleb128 0x13
 2097 0102 00       		.byte	0
 2098 0103 00       		.byte	0
 2099 0104 0F       		.uleb128 0xf
 2100 0105 2E       		.uleb128 0x2e
 2101 0106 01       		.byte	0x1
 2102 0107 3F       		.uleb128 0x3f
 2103 0108 19       		.uleb128 0x19
 2104 0109 03       		.uleb128 0x3
 2105 010a 0E       		.uleb128 0xe
 2106 010b 3A       		.uleb128 0x3a
 2107 010c 0B       		.uleb128 0xb
 2108 010d 3B       		.uleb128 0x3b
 2109 010e 05       		.uleb128 0x5
 2110 010f 27       		.uleb128 0x27
 2111 0110 19       		.uleb128 0x19
 2112 0111 11       		.uleb128 0x11
 2113 0112 01       		.uleb128 0x1
 2114 0113 12       		.uleb128 0x12
 2115 0114 06       		.uleb128 0x6
 2116 0115 40       		.uleb128 0x40
 2117 0116 18       		.uleb128 0x18
 2118 0117 9742     		.uleb128 0x2117
 2119 0119 19       		.uleb128 0x19
 2120 011a 01       		.uleb128 0x1
 2121 011b 13       		.uleb128 0x13
 2122 011c 00       		.byte	0
 2123 011d 00       		.byte	0
 2124 011e 10       		.uleb128 0x10
 2125 011f 2E       		.uleb128 0x2e
 2126 0120 01       		.byte	0x1
 2127 0121 3F       		.uleb128 0x3f
 2128 0122 19       		.uleb128 0x19
 2129 0123 03       		.uleb128 0x3
 2130 0124 0E       		.uleb128 0xe
 2131 0125 3A       		.uleb128 0x3a
 2132 0126 0B       		.uleb128 0xb
 2133 0127 3B       		.uleb128 0x3b
 2134 0128 05       		.uleb128 0x5
 2135 0129 27       		.uleb128 0x27
 2136 012a 19       		.uleb128 0x19
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 54


 2137 012b 11       		.uleb128 0x11
 2138 012c 01       		.uleb128 0x1
 2139 012d 12       		.uleb128 0x12
 2140 012e 06       		.uleb128 0x6
 2141 012f 40       		.uleb128 0x40
 2142 0130 18       		.uleb128 0x18
 2143 0131 9642     		.uleb128 0x2116
 2144 0133 19       		.uleb128 0x19
 2145 0134 01       		.uleb128 0x1
 2146 0135 13       		.uleb128 0x13
 2147 0136 00       		.byte	0
 2148 0137 00       		.byte	0
 2149 0138 11       		.uleb128 0x11
 2150 0139 01       		.uleb128 0x1
 2151 013a 01       		.byte	0x1
 2152 013b 49       		.uleb128 0x49
 2153 013c 13       		.uleb128 0x13
 2154 013d 01       		.uleb128 0x1
 2155 013e 13       		.uleb128 0x13
 2156 013f 00       		.byte	0
 2157 0140 00       		.byte	0
 2158 0141 12       		.uleb128 0x12
 2159 0142 21       		.uleb128 0x21
 2160 0143 00       		.byte	0
 2161 0144 49       		.uleb128 0x49
 2162 0145 13       		.uleb128 0x13
 2163 0146 2F       		.uleb128 0x2f
 2164 0147 0B       		.uleb128 0xb
 2165 0148 00       		.byte	0
 2166 0149 00       		.byte	0
 2167 014a 13       		.uleb128 0x13
 2168 014b 26       		.uleb128 0x26
 2169 014c 00       		.byte	0
 2170 014d 49       		.uleb128 0x49
 2171 014e 13       		.uleb128 0x13
 2172 014f 00       		.byte	0
 2173 0150 00       		.byte	0
 2174 0151 14       		.uleb128 0x14
 2175 0152 34       		.uleb128 0x34
 2176 0153 00       		.byte	0
 2177 0154 03       		.uleb128 0x3
 2178 0155 0E       		.uleb128 0xe
 2179 0156 3A       		.uleb128 0x3a
 2180 0157 0B       		.uleb128 0xb
 2181 0158 3B       		.uleb128 0x3b
 2182 0159 0B       		.uleb128 0xb
 2183 015a 49       		.uleb128 0x49
 2184 015b 13       		.uleb128 0x13
 2185 015c 3F       		.uleb128 0x3f
 2186 015d 19       		.uleb128 0x19
 2187 015e 02       		.uleb128 0x2
 2188 015f 18       		.uleb128 0x18
 2189 0160 00       		.byte	0
 2190 0161 00       		.byte	0
 2191 0162 00       		.byte	0
 2192              		.section	.debug_aranges,"",%progbits
 2193 0000 A4000000 		.4byte	0xa4
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 55


 2194 0004 0200     		.2byte	0x2
 2195 0006 00000000 		.4byte	.Ldebug_info0
 2196 000a 04       		.byte	0x4
 2197 000b 00       		.byte	0
 2198 000c 0000     		.2byte	0
 2199 000e 0000     		.2byte	0
 2200 0010 00000000 		.4byte	.LFB1
 2201 0014 24000000 		.4byte	.LFE1-.LFB1
 2202 0018 00000000 		.4byte	.LFB2
 2203 001c C4010000 		.4byte	.LFE2-.LFB2
 2204 0020 00000000 		.4byte	.LFB3
 2205 0024 38000000 		.4byte	.LFE3-.LFB3
 2206 0028 00000000 		.4byte	.LFB4
 2207 002c 1C000000 		.4byte	.LFE4-.LFB4
 2208 0030 00000000 		.4byte	.LFB5
 2209 0034 1C000000 		.4byte	.LFE5-.LFB5
 2210 0038 00000000 		.4byte	.LFB6
 2211 003c 20000000 		.4byte	.LFE6-.LFB6
 2212 0040 00000000 		.4byte	.LFB7
 2213 0044 48000000 		.4byte	.LFE7-.LFB7
 2214 0048 00000000 		.4byte	.LFB8
 2215 004c 44000000 		.4byte	.LFE8-.LFB8
 2216 0050 00000000 		.4byte	.LFB9
 2217 0054 20000000 		.4byte	.LFE9-.LFB9
 2218 0058 00000000 		.4byte	.LFB10
 2219 005c 30000000 		.4byte	.LFE10-.LFB10
 2220 0060 00000000 		.4byte	.LFB11
 2221 0064 30000000 		.4byte	.LFE11-.LFB11
 2222 0068 00000000 		.4byte	.LFB12
 2223 006c 20000000 		.4byte	.LFE12-.LFB12
 2224 0070 00000000 		.4byte	.LFB13
 2225 0074 20000000 		.4byte	.LFE13-.LFB13
 2226 0078 00000000 		.4byte	.LFB14
 2227 007c 34000000 		.4byte	.LFE14-.LFB14
 2228 0080 00000000 		.4byte	.LFB15
 2229 0084 2C000000 		.4byte	.LFE15-.LFB15
 2230 0088 00000000 		.4byte	.LFB16
 2231 008c A0000000 		.4byte	.LFE16-.LFB16
 2232 0090 00000000 		.4byte	.LFB17
 2233 0094 90000000 		.4byte	.LFE17-.LFB17
 2234 0098 00000000 		.4byte	.LFB18
 2235 009c 80000000 		.4byte	.LFE18-.LFB18
 2236 00a0 00000000 		.4byte	0
 2237 00a4 00000000 		.4byte	0
 2238              		.section	.debug_ranges,"",%progbits
 2239              	.Ldebug_ranges0:
 2240 0000 00000000 		.4byte	.LFB1
 2241 0004 24000000 		.4byte	.LFE1
 2242 0008 00000000 		.4byte	.LFB2
 2243 000c C4010000 		.4byte	.LFE2
 2244 0010 00000000 		.4byte	.LFB3
 2245 0014 38000000 		.4byte	.LFE3
 2246 0018 00000000 		.4byte	.LFB4
 2247 001c 1C000000 		.4byte	.LFE4
 2248 0020 00000000 		.4byte	.LFB5
 2249 0024 1C000000 		.4byte	.LFE5
 2250 0028 00000000 		.4byte	.LFB6
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 56


 2251 002c 20000000 		.4byte	.LFE6
 2252 0030 00000000 		.4byte	.LFB7
 2253 0034 48000000 		.4byte	.LFE7
 2254 0038 00000000 		.4byte	.LFB8
 2255 003c 44000000 		.4byte	.LFE8
 2256 0040 00000000 		.4byte	.LFB9
 2257 0044 20000000 		.4byte	.LFE9
 2258 0048 00000000 		.4byte	.LFB10
 2259 004c 30000000 		.4byte	.LFE10
 2260 0050 00000000 		.4byte	.LFB11
 2261 0054 30000000 		.4byte	.LFE11
 2262 0058 00000000 		.4byte	.LFB12
 2263 005c 20000000 		.4byte	.LFE12
 2264 0060 00000000 		.4byte	.LFB13
 2265 0064 20000000 		.4byte	.LFE13
 2266 0068 00000000 		.4byte	.LFB14
 2267 006c 34000000 		.4byte	.LFE14
 2268 0070 00000000 		.4byte	.LFB15
 2269 0074 2C000000 		.4byte	.LFE15
 2270 0078 00000000 		.4byte	.LFB16
 2271 007c A0000000 		.4byte	.LFE16
 2272 0080 00000000 		.4byte	.LFB17
 2273 0084 90000000 		.4byte	.LFE17
 2274 0088 00000000 		.4byte	.LFB18
 2275 008c 80000000 		.4byte	.LFE18
 2276 0090 00000000 		.4byte	0
 2277 0094 00000000 		.4byte	0
 2278              		.section	.debug_line,"",%progbits
 2279              	.Ldebug_line0:
 2280 0000 95020000 		.section	.debug_str,"MS",%progbits,1
 2280      02004000 
 2280      00000201 
 2280      FB0E0D00 
 2280      01010101 
 2281              	.LASF10:
 2282 0000 75696E74 		.ascii	"uint16\000"
 2282      313600
 2283              	.LASF48:
 2284 0007 61646347 		.ascii	"adcGain\000"
 2284      61696E00 
 2285              	.LASF24:
 2286 000f 636F756E 		.ascii	"counts\000"
 2286      747300
 2287              	.LASF54:
 2288 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2288      436F756E 
 2288      7473546F 
 2288      5F566F6C 
 2288      747300
 2289              	.LASF36:
 2290 0029 4144435F 		.ascii	"ADC_Init\000"
 2290      496E6974 
 2290      00
 2291              	.LASF7:
 2292 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2292      206C6F6E 
 2292      6720756E 
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 57


 2292      7369676E 
 2292      65642069 
 2293              	.LASF28:
 2294 0049 4144435F 		.ascii	"ADC_StartConvert\000"
 2294      53746172 
 2294      74436F6E 
 2294      76657274 
 2294      00
 2295              	.LASF6:
 2296 005a 6C6F6E67 		.ascii	"long long int\000"
 2296      206C6F6E 
 2296      6720696E 
 2296      7400
 2297              	.LASF0:
 2298 0068 7369676E 		.ascii	"signed char\000"
 2298      65642063 
 2298      68617200 
 2299              	.LASF30:
 2300 0074 73746174 		.ascii	"status\000"
 2300      757300
 2301              	.LASF13:
 2302 007b 696E7433 		.ascii	"int32\000"
 2302      3200
 2303              	.LASF25:
 2304 0081 4144435F 		.ascii	"ADC_Start\000"
 2304      53746172 
 2304      7400
 2305              	.LASF62:
 2306 008b 433A5C55 		.ascii	"C:\\Users\\bnels\\src\\PSoC4_UART_base\\UartComm_ba"
 2306      73657273 
 2306      5C626E65 
 2306      6C735C73 
 2306      72635C50 
 2307 00b9 73655C55 		.ascii	"se\\UartComm_base.cydsn\000"
 2307      61727443 
 2307      6F6D6D5F 
 2307      62617365 
 2307      2E637964 
 2308              	.LASF4:
 2309 00d0 6C6F6E67 		.ascii	"long int\000"
 2309      20696E74 
 2309      00
 2310              	.LASF52:
 2311 00d9 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2311      436F756E 
 2311      7473546F 
 2311      5F75566F 
 2311      6C747300 
 2312              	.LASF59:
 2313 00ed 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2313      636F756E 
 2313      74735065 
 2313      72313056 
 2313      6F6C7400 
 2314              	.LASF9:
 2315 0101 75696E74 		.ascii	"uint8\000"
 2315      3800
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 58


 2316              	.LASF16:
 2317 0107 646F7562 		.ascii	"double\000"
 2317      6C6500
 2318              	.LASF11:
 2319 010e 75696E74 		.ascii	"uint32\000"
 2319      333200
 2320              	.LASF38:
 2321 0115 6D61736B 		.ascii	"mask\000"
 2321      00
 2322              	.LASF57:
 2323 011a 4144435F 		.ascii	"ADC_initVar\000"
 2323      696E6974 
 2323      56617200 
 2324              	.LASF33:
 2325 0126 7265744D 		.ascii	"retMode\000"
 2325      6F646500 
 2326              	.LASF43:
 2327 012e 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2327      5365744C 
 2327      696D6974 
 2327      4D61736B 
 2327      00
 2328              	.LASF8:
 2329 013f 756E7369 		.ascii	"unsigned int\000"
 2329      676E6564 
 2329      20696E74 
 2329      00
 2330              	.LASF53:
 2331 014c 75566F6C 		.ascii	"uVolts\000"
 2331      747300
 2332              	.LASF5:
 2333 0153 6C6F6E67 		.ascii	"long unsigned int\000"
 2333      20756E73 
 2333      69676E65 
 2333      6420696E 
 2333      7400
 2334              	.LASF44:
 2335 0165 4144435F 		.ascii	"ADC_SetSatMask\000"
 2335      53657453 
 2335      61744D61 
 2335      736B00
 2336              	.LASF55:
 2337 0174 766F6C74 		.ascii	"volts\000"
 2337      7300
 2338              	.LASF23:
 2339 017a 746D7052 		.ascii	"tmpRegVal\000"
 2339      65675661 
 2339      6C00
 2340              	.LASF3:
 2341 0184 73686F72 		.ascii	"short unsigned int\000"
 2341      7420756E 
 2341      7369676E 
 2341      65642069 
 2341      6E7400
 2342              	.LASF29:
 2343 0197 4144435F 		.ascii	"ADC_StopConvert\000"
 2343      53746F70 
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 59


 2343      436F6E76 
 2343      65727400 
 2344              	.LASF60:
 2345 01a7 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2345      43313120 
 2345      352E342E 
 2345      31203230 
 2345      31363036 
 2346 01da 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2346      20726576 
 2346      6973696F 
 2346      6E203233 
 2346      37373135 
 2347 020d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2347      66756E63 
 2347      74696F6E 
 2347      2D736563 
 2347      74696F6E 
 2348              	.LASF51:
 2349 0235 6D566F6C 		.ascii	"mVolts\000"
 2349      747300
 2350              	.LASF19:
 2351 023c 72656733 		.ascii	"reg32\000"
 2351      3200
 2352              	.LASF14:
 2353 0242 666C6F61 		.ascii	"float32\000"
 2353      74333200 
 2354              	.LASF21:
 2355 024a 73697A65 		.ascii	"sizetype\000"
 2355      74797065 
 2355      00
 2356              	.LASF40:
 2357 0253 6C6F774C 		.ascii	"lowLimit\000"
 2357      696D6974 
 2357      00
 2358              	.LASF20:
 2359 025c 6C6F6E67 		.ascii	"long double\000"
 2359      20646F75 
 2359      626C6500 
 2360              	.LASF41:
 2361 0268 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2361      53657448 
 2361      6967684C 
 2361      696D6974 
 2361      00
 2362              	.LASF31:
 2363 0279 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2363      4973456E 
 2363      64436F6E 
 2363      76657273 
 2363      696F6E00 
 2364              	.LASF17:
 2365 028d 696E7436 		.ascii	"int64\000"
 2365      3400
 2366              	.LASF37:
 2367 0293 4144435F 		.ascii	"ADC_SetChanMask\000"
 2367      53657443 
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 60


 2367      68616E4D 
 2367      61736B00 
 2368              	.LASF61:
 2369 02a3 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC.c\000"
 2369      72617465 
 2369      645F536F 
 2369      75726365 
 2369      5C50536F 
 2370              	.LASF47:
 2371 02c0 4144435F 		.ascii	"ADC_SetGain\000"
 2371      53657447 
 2371      61696E00 
 2372              	.LASF15:
 2373 02cc 666C6F61 		.ascii	"float\000"
 2373      7400
 2374              	.LASF42:
 2375 02d2 68696768 		.ascii	"highLimit\000"
 2375      4C696D69 
 2375      7400
 2376              	.LASF49:
 2377 02dc 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2377      436F756E 
 2377      7473546F 
 2377      5F6D566F 
 2377      6C747300 
 2378              	.LASF39:
 2379 02f0 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2379      5365744C 
 2379      6F774C69 
 2379      6D697400 
 2380              	.LASF1:
 2381 0300 756E7369 		.ascii	"unsigned char\000"
 2381      676E6564 
 2381      20636861 
 2381      7200
 2382              	.LASF58:
 2383 030e 4144435F 		.ascii	"ADC_offset\000"
 2383      6F666673 
 2383      657400
 2384              	.LASF2:
 2385 0319 73686F72 		.ascii	"short int\000"
 2385      7420696E 
 2385      7400
 2386              	.LASF27:
 2387 0323 4144435F 		.ascii	"ADC_Stop\000"
 2387      53746F70 
 2387      00
 2388              	.LASF22:
 2389 032c 63684E75 		.ascii	"chNum\000"
 2389      6D00
 2390              	.LASF34:
 2391 0332 6368616E 		.ascii	"chan\000"
 2391      00
 2392              	.LASF18:
 2393 0337 63686172 		.ascii	"char\000"
 2393      00
 2394              	.LASF56:
ARM GAS  C:\Users\bnels\AppData\Local\Temp\ccJKco2g.s 			page 61


 2395 033c 4144435F 		.ascii	"ADC_channelsConfig\000"
 2395      6368616E 
 2395      6E656C73 
 2395      436F6E66 
 2395      696700
 2396              	.LASF46:
 2397 034f 6F666673 		.ascii	"offset\000"
 2397      657400
 2398              	.LASF50:
 2399 0356 61646343 		.ascii	"adcCounts\000"
 2399      6F756E74 
 2399      7300
 2400              	.LASF26:
 2401 0360 4144435F 		.ascii	"ADC_Enable\000"
 2401      456E6162 
 2401      6C6500
 2402              	.LASF12:
 2403 036b 696E7431 		.ascii	"int16\000"
 2403      3600
 2404              	.LASF45:
 2405 0371 4144435F 		.ascii	"ADC_SetOffset\000"
 2405      5365744F 
 2405      66667365 
 2405      7400
 2406              	.LASF35:
 2407 037f 72657375 		.ascii	"result\000"
 2407      6C7400
 2408              	.LASF32:
 2409 0386 4144435F 		.ascii	"ADC_GetResult16\000"
 2409      47657452 
 2409      6573756C 
 2409      74313600 
 2410              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
